import { Any, StoreData } from 'src/app/share/share.model';

export const STORE_DATA_MOCK = ({
  projects: [
    {
      swagger: '2.0',
      info: {
        description:
          'This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.',
        version: '1.0.5',
        title: 'Swagger Petstore',
        termsOfService: 'http://swagger.io/terms/',
        contact: { email: 'apiteam@swagger.io' },
        license: {
          name: 'Apache 2.0',
          url: 'http://www.apache.org/licenses/LICENSE-2.0.html',
        },
      },
      host: 'petstore.swagger.io',
      basePath: '/v2',
      tags: [
        {
          name: 'pet',
          description: 'Everything about your Pets',
          externalDocs: {
            description: 'Find out more',
            url: 'http://swagger.io',
          },
        },
        { name: 'store', description: 'Access to Petstore orders' },
        {
          name: 'user',
          description: 'Operations about user',
          externalDocs: {
            description: 'Find out more about our store',
            url: 'http://swagger.io',
          },
        },
      ],
      schemes: ['https', 'http'],
      paths: {
        '/pet/{petId}/uploadImage': {
          post: {
            tags: ['pet'],
            summary: 'uploads an image',
            description: '',
            operationId: 'uploadFile',
            consumes: ['multipart/form-data'],
            produces: ['application/json'],
            parameters: [
              {
                name: 'petId',
                in: 'path',
                description: 'ID of pet to update',
                required: true,
                type: 'integer',
                format: 'int64',
                display: 'petId',
              },
              {
                name: 'additionalMetadata',
                in: 'formData',
                description: 'Additional data to pass to server',
                required: false,
                type: 'string',
                display: 'additionalMetadata?',
              },
              {
                name: 'file',
                in: 'formData',
                description: 'file to upload',
                required: false,
                type: 'file',
                display: 'file?',
              },
            ],
            responses: {
              200: {
                description: 'successful operation',
                schema: { $ref: '#/definitions/ApiResponse' },
                code: 200,
              },
            },
            security: [{ petstore_auth: ['write:pets', 'read:pets'] }],
          },
        },
        '/pet': {
          post: {
            tags: ['pet'],
            summary: 'Add a new pet to the store',
            description: '',
            operationId: 'addPet',
            consumes: ['application/json', 'application/xml'],
            produces: ['application/json', 'application/xml'],
            parameters: [
              {
                in: 'body',
                name: 'body',
                description: 'Pet object that needs to be added to the store',
                required: true,
                schema: { $ref: '#/definitions/Pet' },
                display: 'body',
              },
            ],
            responses: {
              405: { description: 'Invalid input', code: 405 },
            },
            security: [{ petstore_auth: ['write:pets', 'read:pets'] }],
          },
          put: {
            tags: ['pet'],
            summary: 'Update an existing pet',
            description: '',
            operationId: 'updatePet',
            consumes: ['application/json', 'application/xml'],
            produces: ['application/json', 'application/xml'],
            parameters: [
              {
                in: 'body',
                name: 'body',
                description: 'Pet object that needs to be added to the store',
                required: true,
                schema: { $ref: '#/definitions/Pet' },
                display: 'body',
              },
            ],
            responses: {
              400: { description: 'Invalid ID supplied', code: 400 },
              404: { description: 'Pet not found', code: 404 },
              405: { description: 'Validation exception', code: 405 },
            },
            security: [{ petstore_auth: ['write:pets', 'read:pets'] }],
          },
        },
        '/pet/findByStatus': {
          get: {
            tags: ['pet'],
            summary: 'Finds Pets by status',
            description:
              'Multiple status values can be provided with comma separated strings',
            operationId: 'findPetsByStatus',
            produces: ['application/json', 'application/xml'],
            parameters: [
              {
                name: 'status',
                in: 'query',
                description:
                  'Status values that need to be considered for filter',
                required: true,
                type: 'array',
                items: {
                  type: 'string',
                  enum: ['available', 'pending', 'sold'],
                  default: 'available',
                },
                collectionFormat: 'multi',
                display: 'status',
              },
            ],
            responses: {
              200: {
                description: 'successful operation',
                schema: {
                  type: 'array',
                  items: { $ref: '#/definitions/Pet' },
                },
                code: 200,
              },
              400: { description: 'Invalid status value', code: 400 },
            },
            security: [{ petstore_auth: ['write:pets', 'read:pets'] }],
          },
        },
        '/pet/findByTags': {
          get: {
            tags: ['pet'],
            summary: 'Finds Pets by tags',
            description:
              'Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.',
            operationId: 'findPetsByTags',
            produces: ['application/json', 'application/xml'],
            parameters: [
              {
                name: 'tags',
                in: 'query',
                description: 'Tags to filter by',
                required: true,
                type: 'array',
                items: { type: 'string' },
                collectionFormat: 'multi',
                display: 'tags',
              },
            ],
            responses: {
              200: {
                description: 'successful operation',
                schema: {
                  type: 'array',
                  items: { $ref: '#/definitions/Pet' },
                },
                code: 200,
              },
              400: { description: 'Invalid tag value', code: 400 },
            },
            security: [{ petstore_auth: ['write:pets', 'read:pets'] }],
            deprecated: true,
          },
        },
        '/pet/{petId}': {
          get: {
            tags: ['pet'],
            summary: 'Find pet by ID',
            description: 'Returns a single pet',
            operationId: 'getPetById',
            produces: ['application/json', 'application/xml'],
            parameters: [
              {
                name: 'petId',
                in: 'path',
                description: 'ID of pet to return',
                required: true,
                type: 'integer',
                format: 'int64',
                display: 'petId',
              },
            ],
            responses: {
              200: {
                description: 'successful operation',
                schema: { $ref: '#/definitions/Pet' },
                code: 200,
              },
              400: { description: 'Invalid ID supplied', code: 400 },
              404: { description: 'Pet not found', code: 404 },
            },
            security: [{ api_key: [] }],
          },
          post: {
            tags: ['pet'],
            summary: 'Updates a pet in the store with form data',
            description: '',
            operationId: 'updatePetWithForm',
            consumes: ['application/x-www-form-urlencoded'],
            produces: ['application/json', 'application/xml'],
            parameters: [
              {
                name: 'petId',
                in: 'path',
                description: 'ID of pet that needs to be updated',
                required: true,
                type: 'integer',
                format: 'int64',
                display: 'petId',
              },
              {
                name: 'name',
                in: 'formData',
                description: 'Updated name of the pet',
                required: false,
                type: 'string',
                display: 'name?',
              },
              {
                name: 'status',
                in: 'formData',
                description: 'Updated status of the pet',
                required: false,
                type: 'string',
                display: 'status?',
              },
            ],
            responses: {
              405: { description: 'Invalid input', code: 405 },
            },
            security: [{ petstore_auth: ['write:pets', 'read:pets'] }],
          },
          delete: {
            tags: ['pet'],
            summary: 'Deletes a pet',
            description: '',
            operationId: 'deletePet',
            produces: ['application/json', 'application/xml'],
            parameters: [
              {
                name: 'api_key',
                in: 'header',
                required: false,
                type: 'string',
                display: 'api_key?',
              },
              {
                name: 'petId',
                in: 'path',
                description: 'Pet id to delete',
                required: true,
                type: 'integer',
                format: 'int64',
                display: 'petId',
              },
            ],
            responses: {
              400: { description: 'Invalid ID supplied', code: 400 },
              404: { description: 'Pet not found', code: 404 },
            },
            security: [{ petstore_auth: ['write:pets', 'read:pets'] }],
          },
        },
        '/store/order': {
          post: {
            tags: ['store'],
            summary: 'Place an order for a pet',
            description: '',
            operationId: 'placeOrder',
            consumes: ['application/json'],
            produces: ['application/json', 'application/xml'],
            parameters: [
              {
                in: 'body',
                name: 'body',
                description: 'order placed for purchasing the pet',
                required: true,
                schema: { $ref: '#/definitions/Order' },
                display: 'body',
              },
            ],
            responses: {
              200: {
                description: 'successful operation',
                schema: { $ref: '#/definitions/Order' },
                code: 200,
              },
              400: { description: 'Invalid Order', code: 400 },
            },
          },
        },
        '/store/order/{orderId}': {
          get: {
            tags: ['store'],
            summary: 'Find purchase order by ID',
            description:
              'For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions',
            operationId: 'getOrderById',
            produces: ['application/json', 'application/xml'],
            parameters: [
              {
                name: 'orderId',
                in: 'path',
                description: 'ID of pet that needs to be fetched',
                required: true,
                type: 'integer',
                maximum: 10,
                minimum: 1,
                format: 'int64',
                display: 'orderId',
              },
            ],
            responses: {
              200: {
                description: 'successful operation',
                schema: { $ref: '#/definitions/Order' },
                code: 200,
              },
              400: { description: 'Invalid ID supplied', code: 400 },
              404: { description: 'Order not found', code: 404 },
            },
          },
          delete: {
            tags: ['store'],
            summary: 'Delete purchase order by ID',
            description:
              'For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors',
            operationId: 'deleteOrder',
            produces: ['application/json', 'application/xml'],
            parameters: [
              {
                name: 'orderId',
                in: 'path',
                description: 'ID of the order that needs to be deleted',
                required: true,
                type: 'integer',
                minimum: 1,
                format: 'int64',
                display: 'orderId',
              },
            ],
            responses: {
              400: { description: 'Invalid ID supplied', code: 400 },
              404: { description: 'Order not found', code: 404 },
            },
          },
        },
        '/store/inventory': {
          get: {
            tags: ['store'],
            summary: 'Returns pet inventories by status',
            description: 'Returns a map of status codes to quantities',
            operationId: 'getInventory',
            produces: ['application/json'],
            parameters: [],
            responses: {
              200: {
                description: 'successful operation',
                schema: {
                  type: 'object',
                  additionalProperties: {
                    type: 'integer',
                    format: 'int32',
                  },
                },
                code: 200,
              },
            },
            security: [{ api_key: [] }],
          },
        },
        '/user/createWithArray': {
          post: {
            tags: ['user'],
            summary: 'Creates list of users with given input array',
            description: '',
            operationId: 'createUsersWithArrayInput',
            consumes: ['application/json'],
            produces: ['application/json', 'application/xml'],
            parameters: [
              {
                in: 'body',
                name: 'body',
                description: 'List of user object',
                required: true,
                schema: {
                  type: 'array',
                  items: { $ref: '#/definitions/User' },
                },
                display: 'body',
              },
            ],
            responses: {
              default: { description: 'successful operation', code: null },
            },
          },
        },
        '/user/createWithList': {
          post: {
            tags: ['user'],
            summary: 'Creates list of users with given input array',
            description: '',
            operationId: 'createUsersWithListInput',
            consumes: ['application/json'],
            produces: ['application/json', 'application/xml'],
            parameters: [
              {
                in: 'body',
                name: 'body',
                description: 'List of user object',
                required: true,
                schema: {
                  type: 'array',
                  items: { $ref: '#/definitions/User' },
                },
                display: 'body',
              },
            ],
            responses: {
              default: { description: 'successful operation', code: null },
            },
          },
        },
        '/user/{username}': {
          get: {
            tags: ['user'],
            summary: 'Get user by user name',
            description: '',
            operationId: 'getUserByName',
            produces: ['application/json', 'application/xml'],
            parameters: [
              {
                name: 'username',
                in: 'path',
                description:
                  'The name that needs to be fetched. Use user1 for testing. ',
                required: true,
                type: 'string',
                display: 'username',
              },
            ],
            responses: {
              200: {
                description: 'successful operation',
                schema: { $ref: '#/definitions/User' },
                code: 200,
              },
              400: {
                description: 'Invalid username supplied',
                code: 400,
              },
              404: { description: 'User not found', code: 404 },
            },
          },
          put: {
            tags: ['user'],
            summary: 'Updated user',
            description: 'This can only be done by the logged in user.',
            operationId: 'updateUser',
            consumes: ['application/json'],
            produces: ['application/json', 'application/xml'],
            parameters: [
              {
                name: 'username',
                in: 'path',
                description: 'name that need to be updated',
                required: true,
                type: 'string',
                display: 'username',
              },
              {
                in: 'body',
                name: 'body',
                description: 'Updated user object',
                required: true,
                schema: { $ref: '#/definitions/User' },
                display: 'body',
              },
            ],
            responses: {
              400: { description: 'Invalid user supplied', code: 400 },
              404: { description: 'User not found', code: 404 },
            },
          },
          delete: {
            tags: ['user'],
            summary: 'Delete user',
            description: 'This can only be done by the logged in user.',
            operationId: 'deleteUser',
            produces: ['application/json', 'application/xml'],
            parameters: [
              {
                name: 'username',
                in: 'path',
                description: 'The name that needs to be deleted',
                required: true,
                type: 'string',
                display: 'username',
              },
            ],
            responses: {
              400: {
                description: 'Invalid username supplied',
                code: 400,
              },
              404: { description: 'User not found', code: 404 },
            },
          },
        },
        '/user/login': {
          get: {
            tags: ['user'],
            summary: 'Logs user into the system',
            description: '',
            operationId: 'loginUser',
            produces: ['application/json', 'application/xml'],
            parameters: [
              {
                name: 'username',
                in: 'query',
                description: 'The user name for login',
                required: true,
                type: 'string',
                display: 'username',
              },
              {
                name: 'password',
                in: 'query',
                description: 'The password for login in clear text',
                required: true,
                type: 'string',
                display: 'password',
              },
            ],
            responses: {
              200: {
                description: 'successful operation',
                headers: {
                  'X-Expires-After': {
                    type: 'string',
                    format: 'date-time',
                    description: 'date in UTC when token expires',
                    header: 'X-Expires-After',
                  },
                  'X-Rate-Limit': {
                    type: 'integer',
                    format: 'int32',
                    description: 'calls per hour allowed by the user',
                    header: 'X-Rate-Limit',
                  },
                },
                schema: { type: 'string' },
                code: 200,
              },
              400: {
                description: 'Invalid username/password supplied',
                code: 400,
              },
            },
          },
        },
        '/user/logout': {
          get: {
            tags: ['user'],
            summary: 'Logs out current logged in user session',
            description: '',
            operationId: 'logoutUser',
            produces: ['application/json', 'application/xml'],
            parameters: [],
            responses: {
              default: { description: 'successful operation', code: null },
            },
          },
        },
        '/user': {
          post: {
            tags: ['user'],
            summary: 'Create user',
            description: 'This can only be done by the logged in user.',
            operationId: 'createUser',
            consumes: ['application/json'],
            produces: ['application/json', 'application/xml'],
            parameters: [
              {
                in: 'body',
                name: 'body',
                description: 'Created user object',
                required: true,
                schema: { $ref: '#/definitions/User' },
                display: 'body',
              },
            ],
            responses: {
              default: { description: 'successful operation', code: null },
            },
          },
        },
      },
      securityDefinitions: {
        api_key: { type: 'apiKey', name: 'api_key', in: 'header' },
        petstore_auth: {
          type: 'oauth2',
          authorizationUrl: 'https://petstore.swagger.io/oauth/authorize',
          flow: 'implicit',
          scopes: {
            'read:pets': 'read your pets',
            'write:pets': 'modify pets in your account',
          },
        },
      },
      definitions: {
        ApiResponse: {
          type: 'object',
          properties: {
            code: { type: 'integer', format: 'int32' },
            type: { type: 'string' },
            message: { type: 'string' },
          },
        },
        Category: {
          type: 'object',
          properties: {
            id: { type: 'integer', format: 'int64' },
            name: { type: 'string' },
          },
          xml: { name: 'Category' },
        },
        Pet: {
          type: 'object',
          required: ['name', 'photoUrls'],
          properties: {
            id: { type: 'integer', format: 'int64' },
            category: { $ref: '#/definitions/Category' },
            name: { type: 'string', example: 'doggie' },
            photoUrls: {
              type: 'array',
              xml: { wrapped: true },
              items: { type: 'string', xml: { name: 'photoUrl' } },
            },
            tags: {
              type: 'array',
              xml: { wrapped: true },
              items: { xml: { name: 'tag' }, $ref: '#/definitions/Tag' },
            },
            status: {
              type: 'string',
              description: 'pet status in the store',
              enum: ['available', 'pending', 'sold'],
            },
          },
          xml: { name: 'Pet' },
        },
        Tag: {
          type: 'object',
          properties: {
            id: { type: 'integer', format: 'int64' },
            name: { type: 'string' },
          },
          xml: { name: 'Tag' },
        },
        Order: {
          type: 'object',
          properties: {
            id: { type: 'integer', format: 'int64' },
            petId: { type: 'integer', format: 'int64' },
            quantity: { type: 'integer', format: 'int32' },
            shipDate: { type: 'string', format: 'date-time' },
            status: {
              type: 'string',
              description: 'Order Status',
              enum: ['placed', 'approved', 'delivered'],
            },
            complete: { type: 'boolean' },
          },
          xml: { name: 'Order' },
        },
        User: {
          type: 'object',
          properties: {
            id: { type: 'integer', format: 'int64' },
            username: { type: 'string' },
            firstName: { type: 'string' },
            lastName: { type: 'string' },
            email: { type: 'string' },
            password: { type: 'string' },
            phone: { type: 'string' },
            userStatus: {
              type: 'integer',
              format: 'int32',
              description: 'User Status',
            },
          },
          xml: { name: 'User' },
        },
      },
      externalDocs: {
        description: 'Find out more about Swagger',
        url: 'http://swagger.io',
      },
      updateUrl: 'https://petstore.swagger.io/v2/swagger.json',
      display: 'Swagger Petstore 1.0.5',
      id: 'Swagger%20Petstore1.0.5',
      namespaces: [
        {
          name: 'pet',
          description: 'Everything about your Pets',
          externalDocs: {
            description: 'Find out more',
            url: 'http://swagger.io',
          },
          apiItems: [
            {
              tags: ['pet'],
              summary: 'Add a new pet to the store',
              description: '',
              operationId: 'addPet',
              consumes: ['application/json', 'application/xml'],
              produces: ['application/json', 'application/xml'],
              parameters: [
                {
                  in: 'body',
                  name: 'body',
                  description: 'Pet object that needs to be added to the store',
                  required: true,
                  schema: { $ref: '#/definitions/Pet' },
                  display: 'body',
                },
              ],
              responses: {
                405: { description: 'Invalid input', code: 405 },
              },
              security: [{ petstore_auth: ['write:pets', 'read:pets'] }],
              __id: '/pet|post',
              __produce: 'application/json',
              __info: {
                description: 'Add a new pet to the store',
                method: 'post',
                url: '/pet',
                urlForCopy: '`/pet`',
                operationId: 'addPet',
              },
              __index: 0,
            },
            {
              tags: ['pet'],
              summary: 'Update an existing pet',
              description: '',
              operationId: 'updatePet',
              consumes: ['application/json', 'application/xml'],
              produces: ['application/json', 'application/xml'],
              parameters: [
                {
                  in: 'body',
                  name: 'body',
                  description: 'Pet object that needs to be added to the store',
                  required: true,
                  schema: { $ref: '#/definitions/Pet' },
                  display: 'body',
                },
              ],
              responses: {
                400: { description: 'Invalid ID supplied', code: 400 },
                404: { description: 'Pet not found', code: 404 },
                405: { description: 'Validation exception', code: 405 },
              },
              security: [{ petstore_auth: ['write:pets', 'read:pets'] }],
              __id: '/pet|put',
              __produce: 'application/json',
              __info: {
                description: 'Update an existing pet',
                method: 'put',
                url: '/pet',
                urlForCopy: '`/pet`',
                operationId: 'updatePet',
              },
              __index: 1,
            },
            {
              tags: ['pet'],
              summary: 'Finds Pets by status',
              description:
                'Multiple status values can be provided with comma separated strings',
              operationId: 'findPetsByStatus',
              produces: ['application/json', 'application/xml'],
              parameters: [
                {
                  name: 'status',
                  in: 'query',
                  description:
                    'Status values that need to be considered for filter',
                  required: true,
                  type: 'array',
                  items: {
                    type: 'string',
                    enum: ['available', 'pending', 'sold'],
                    default: 'available',
                  },
                  collectionFormat: 'multi',
                  display: 'status',
                },
              ],
              responses: {
                200: {
                  description: 'successful operation',
                  schema: {
                    type: 'array',
                    items: { $ref: '#/definitions/Pet' },
                  },
                  code: 200,
                },
                400: { description: 'Invalid status value', code: 400 },
              },
              security: [{ petstore_auth: ['write:pets', 'read:pets'] }],
              __id: '/pet/findByStatus|get',
              __produce: 'application/json',
              __info: {
                description: 'Finds Pets by status',
                method: 'get',
                url: '/pet/findByStatus',
                urlForCopy: '`/pet/findByStatus`',
                operationId: 'findPetsByStatus',
              },
              __index: 2,
            },
            {
              tags: ['pet'],
              summary: 'Finds Pets by tags',
              description:
                'Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.',
              operationId: 'findPetsByTags',
              produces: ['application/json', 'application/xml'],
              parameters: [
                {
                  name: 'tags',
                  in: 'query',
                  description: 'Tags to filter by',
                  required: true,
                  type: 'array',
                  items: { type: 'string' },
                  collectionFormat: 'multi',
                  display: 'tags',
                },
              ],
              responses: {
                200: {
                  description: 'successful operation',
                  schema: {
                    type: 'array',
                    items: { $ref: '#/definitions/Pet' },
                  },
                  code: 200,
                },
                400: { description: 'Invalid tag value', code: 400 },
              },
              security: [{ petstore_auth: ['write:pets', 'read:pets'] }],
              deprecated: true,
              __id: '/pet/findByTags|get',
              __produce: 'application/json',
              __info: {
                description: 'Finds Pets by tags',
                method: 'get',
                url: '/pet/findByTags',
                deprecated: true,
                urlForCopy: '`/pet/findByTags`',
                operationId: 'findPetsByTags',
              },
              __index: 3,
            },
            {
              tags: ['pet'],
              summary: 'Deletes a pet',
              description: '',
              operationId: 'deletePet',
              produces: ['application/json', 'application/xml'],
              parameters: [
                {
                  name: 'api_key',
                  in: 'header',
                  required: false,
                  type: 'string',
                  display: 'api_key?',
                },
                {
                  name: 'petId',
                  in: 'path',
                  description: 'Pet id to delete',
                  required: true,
                  type: 'integer',
                  format: 'int64',
                  display: 'petId',
                },
              ],
              responses: {
                400: { description: 'Invalid ID supplied', code: 400 },
                404: { description: 'Pet not found', code: 404 },
              },
              security: [{ petstore_auth: ['write:pets', 'read:pets'] }],
              __id: '/pet/{petId}|delete',
              __produce: 'application/json',
              __info: {
                description: 'Deletes a pet',
                method: 'delete',
                url: '/pet/{petId}',
                urlForCopy: '`/pet/${petId}`',
                operationId: 'deletePet',
              },
              __index: 4,
            },
            {
              tags: ['pet'],
              summary: 'Find pet by ID',
              description: 'Returns a single pet',
              operationId: 'getPetById',
              produces: ['application/json', 'application/xml'],
              parameters: [
                {
                  name: 'petId',
                  in: 'path',
                  description: 'ID of pet to return',
                  required: true,
                  type: 'integer',
                  format: 'int64',
                  display: 'petId',
                },
              ],
              responses: {
                200: {
                  description: 'successful operation',
                  schema: { $ref: '#/definitions/Pet' },
                  code: 200,
                },
                400: { description: 'Invalid ID supplied', code: 400 },
                404: { description: 'Pet not found', code: 404 },
              },
              security: [{ api_key: [] }],
              __id: '/pet/{petId}|get',
              __produce: 'application/json',
              __info: {
                description: 'Find pet by ID',
                method: 'get',
                url: '/pet/{petId}',
                urlForCopy: '`/pet/${petId}`',
                operationId: 'getPetById',
              },
              __index: 5,
            },
            {
              tags: ['pet'],
              summary: 'Updates a pet in the store with form data',
              description: '',
              operationId: 'updatePetWithForm',
              consumes: ['application/x-www-form-urlencoded'],
              produces: ['application/json', 'application/xml'],
              parameters: [
                {
                  name: 'petId',
                  in: 'path',
                  description: 'ID of pet that needs to be updated',
                  required: true,
                  type: 'integer',
                  format: 'int64',
                  display: 'petId',
                },
                {
                  name: 'name',
                  in: 'formData',
                  description: 'Updated name of the pet',
                  required: false,
                  type: 'string',
                  display: 'name?',
                },
                {
                  name: 'status',
                  in: 'formData',
                  description: 'Updated status of the pet',
                  required: false,
                  type: 'string',
                  display: 'status?',
                },
              ],
              responses: {
                405: { description: 'Invalid input', code: 405 },
              },
              security: [{ petstore_auth: ['write:pets', 'read:pets'] }],
              __id: '/pet/{petId}|post',
              __produce: 'application/json',
              __info: {
                description: 'Updates a pet in the store with form data',
                method: 'post',
                url: '/pet/{petId}',
                urlForCopy: '`/pet/${petId}`',
                operationId: 'updatePetWithForm',
              },
              __index: 6,
            },
            {
              tags: ['pet'],
              summary: 'uploads an image',
              description: '',
              operationId: 'uploadFile',
              consumes: ['multipart/form-data'],
              produces: ['application/json'],
              parameters: [
                {
                  name: 'petId',
                  in: 'path',
                  description: 'ID of pet to update',
                  required: true,
                  type: 'integer',
                  format: 'int64',
                  display: 'petId',
                },
                {
                  name: 'additionalMetadata',
                  in: 'formData',
                  description: 'Additional data to pass to server',
                  required: false,
                  type: 'string',
                  display: 'additionalMetadata?',
                },
                {
                  name: 'file',
                  in: 'formData',
                  description: 'file to upload',
                  required: false,
                  type: 'file',
                  display: 'file?',
                },
              ],
              responses: {
                200: {
                  description: 'successful operation',
                  schema: { $ref: '#/definitions/ApiResponse' },
                  code: 200,
                },
              },
              security: [{ petstore_auth: ['write:pets', 'read:pets'] }],
              __id: '/pet/{petId}/uploadImage|post',
              __produce: 'application/json',
              __info: {
                description: 'uploads an image',
                method: 'post',
                url: '/pet/{petId}/uploadImage',
                urlForCopy: '`/pet/${petId}/uploadImage`',
                operationId: 'uploadFile',
              },
              __index: 7,
            },
          ],
          matched: true,
        },
        {
          name: 'store',
          description: 'Access to Petstore orders',
          apiItems: [
            {
              tags: ['store'],
              summary: 'Returns pet inventories by status',
              description: 'Returns a map of status codes to quantities',
              operationId: 'getInventory',
              produces: ['application/json'],
              parameters: [],
              responses: {
                200: {
                  description: 'successful operation',
                  schema: {
                    type: 'object',
                    additionalProperties: {
                      type: 'integer',
                      format: 'int32',
                    },
                  },
                  code: 200,
                },
              },
              security: [{ api_key: [] }],
              __id: '/store/inventory|get',
              __produce: 'application/json',
              __info: {
                description: 'Returns pet inventories by status',
                method: 'get',
                url: '/store/inventory',
                urlForCopy: '`/store/inventory`',
                operationId: 'getInventory',
              },
              __index: 8,
            },
            {
              tags: ['store'],
              summary: 'Place an order for a pet',
              description: '',
              operationId: 'placeOrder',
              consumes: ['application/json'],
              produces: ['application/json', 'application/xml'],
              parameters: [
                {
                  in: 'body',
                  name: 'body',
                  description: 'order placed for purchasing the pet',
                  required: true,
                  schema: { $ref: '#/definitions/Order' },
                  display: 'body',
                },
              ],
              responses: {
                200: {
                  description: 'successful operation',
                  schema: { $ref: '#/definitions/Order' },
                  code: 200,
                },
                400: { description: 'Invalid Order', code: 400 },
              },
              __id: '/store/order|post',
              __produce: 'application/json',
              __info: {
                description: 'Place an order for a pet',
                method: 'post',
                url: '/store/order',
                urlForCopy: '`/store/order`',
                operationId: 'placeOrder',
              },
              __index: 9,
            },
            {
              tags: ['store'],
              summary: 'Delete purchase order by ID',
              description:
                'For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors',
              operationId: 'deleteOrder',
              produces: ['application/json', 'application/xml'],
              parameters: [
                {
                  name: 'orderId',
                  in: 'path',
                  description: 'ID of the order that needs to be deleted',
                  required: true,
                  type: 'integer',
                  minimum: 1,
                  format: 'int64',
                  display: 'orderId',
                },
              ],
              responses: {
                400: { description: 'Invalid ID supplied', code: 400 },
                404: { description: 'Order not found', code: 404 },
              },
              __id: '/store/order/{orderId}|delete',
              __produce: 'application/json',
              __info: {
                description: 'Delete purchase order by ID',
                method: 'delete',
                url: '/store/order/{orderId}',
                urlForCopy: '`/store/order/${orderId}`',
                operationId: 'deleteOrder',
              },
              __index: 10,
            },
            {
              tags: ['store'],
              summary: 'Find purchase order by ID',
              description:
                'For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions',
              operationId: 'getOrderById',
              produces: ['application/json', 'application/xml'],
              parameters: [
                {
                  name: 'orderId',
                  in: 'path',
                  description: 'ID of pet that needs to be fetched',
                  required: true,
                  type: 'integer',
                  maximum: 10,
                  minimum: 1,
                  format: 'int64',
                  display: 'orderId',
                },
              ],
              responses: {
                200: {
                  description: 'successful operation',
                  schema: { $ref: '#/definitions/Order' },
                  code: 200,
                },
                400: { description: 'Invalid ID supplied', code: 400 },
                404: { description: 'Order not found', code: 404 },
              },
              __id: '/store/order/{orderId}|get',
              __produce: 'application/json',
              __info: {
                description: 'Find purchase order by ID',
                method: 'get',
                url: '/store/order/{orderId}',
                urlForCopy: '`/store/order/${orderId}`',
                operationId: 'getOrderById',
              },
              __index: 11,
            },
          ],
          matched: true,
        },
        {
          name: 'user',
          description: 'Operations about user',
          externalDocs: {
            description: 'Find out more about our store',
            url: 'http://swagger.io',
          },
          apiItems: [
            {
              tags: ['user'],
              summary: 'Create user',
              description: 'This can only be done by the logged in user.',
              operationId: 'createUser',
              consumes: ['application/json'],
              produces: ['application/json', 'application/xml'],
              parameters: [
                {
                  in: 'body',
                  name: 'body',
                  description: 'Created user object',
                  required: true,
                  schema: { $ref: '#/definitions/User' },
                  display: 'body',
                },
              ],
              responses: {
                default: {
                  description: 'successful operation',
                  code: null,
                },
              },
              __id: '/user|post',
              __produce: 'application/json',
              __info: {
                description: 'Create user',
                method: 'post',
                url: '/user',
                urlForCopy: '`/user`',
                operationId: 'createUser',
              },
              __index: 12,
            },
            {
              tags: ['user'],
              summary: 'Creates list of users with given input array',
              description: '',
              operationId: 'createUsersWithArrayInput',
              consumes: ['application/json'],
              produces: ['application/json', 'application/xml'],
              parameters: [
                {
                  in: 'body',
                  name: 'body',
                  description: 'List of user object',
                  required: true,
                  schema: {
                    type: 'array',
                    items: { $ref: '#/definitions/User' },
                  },
                  display: 'body',
                },
              ],
              responses: {
                default: {
                  description: 'successful operation',
                  code: null,
                },
              },
              __id: '/user/createWithArray|post',
              __produce: 'application/json',
              __info: {
                description: 'Creates list of users with given input array',
                method: 'post',
                url: '/user/createWithArray',
                urlForCopy: '`/user/createWithArray`',
                operationId: 'createUsersWithArrayInput',
              },
              __index: 13,
            },
            {
              tags: ['user'],
              summary: 'Creates list of users with given input array',
              description: '',
              operationId: 'createUsersWithListInput',
              consumes: ['application/json'],
              produces: ['application/json', 'application/xml'],
              parameters: [
                {
                  in: 'body',
                  name: 'body',
                  description: 'List of user object',
                  required: true,
                  schema: {
                    type: 'array',
                    items: { $ref: '#/definitions/User' },
                  },
                  display: 'body',
                },
              ],
              responses: {
                default: {
                  description: 'successful operation',
                  code: null,
                },
              },
              __id: '/user/createWithList|post',
              __produce: 'application/json',
              __info: {
                description: 'Creates list of users with given input array',
                method: 'post',
                url: '/user/createWithList',
                urlForCopy: '`/user/createWithList`',
                operationId: 'createUsersWithListInput',
              },
              __index: 14,
            },
            {
              tags: ['user'],
              summary: 'Logs user into the system',
              description: '',
              operationId: 'loginUser',
              produces: ['application/json', 'application/xml'],
              parameters: [
                {
                  name: 'username',
                  in: 'query',
                  description: 'The user name for login',
                  required: true,
                  type: 'string',
                  display: 'username',
                },
                {
                  name: 'password',
                  in: 'query',
                  description: 'The password for login in clear text',
                  required: true,
                  type: 'string',
                  display: 'password',
                },
              ],
              responses: {
                200: {
                  description: 'successful operation',
                  headers: {
                    'X-Expires-After': {
                      type: 'string',
                      format: 'date-time',
                      description: 'date in UTC when token expires',
                      header: 'X-Expires-After',
                    },
                    'X-Rate-Limit': {
                      type: 'integer',
                      format: 'int32',
                      description: 'calls per hour allowed by the user',
                      header: 'X-Rate-Limit',
                    },
                  },
                  schema: { type: 'string' },
                  code: 200,
                },
                400: {
                  description: 'Invalid username/password supplied',
                  code: 400,
                },
              },
              __id: '/user/login|get',
              __produce: 'application/json',
              __info: {
                description: 'Logs user into the system',
                method: 'get',
                url: '/user/login',
                urlForCopy: '`/user/login`',
                operationId: 'loginUser',
              },
              __index: 15,
            },
            {
              tags: ['user'],
              summary: 'Logs out current logged in user session',
              description: '',
              operationId: 'logoutUser',
              produces: ['application/json', 'application/xml'],
              parameters: [],
              responses: {
                default: {
                  description: 'successful operation',
                  code: null,
                },
              },
              __id: '/user/logout|get',
              __produce: 'application/json',
              __info: {
                description: 'Logs out current logged in user session',
                method: 'get',
                url: '/user/logout',
                urlForCopy: '`/user/logout`',
                operationId: 'logoutUser',
              },
              __index: 16,
            },
            {
              tags: ['user'],
              summary: 'Delete user',
              description: 'This can only be done by the logged in user.',
              operationId: 'deleteUser',
              produces: ['application/json', 'application/xml'],
              parameters: [
                {
                  name: 'username',
                  in: 'path',
                  description: 'The name that needs to be deleted',
                  required: true,
                  type: 'string',
                  display: 'username',
                },
              ],
              responses: {
                400: {
                  description: 'Invalid username supplied',
                  code: 400,
                },
                404: { description: 'User not found', code: 404 },
              },
              __id: '/user/{username}|delete',
              __produce: 'application/json',
              __info: {
                description: 'Delete user',
                method: 'delete',
                url: '/user/{username}',
                urlForCopy: '`/user/${username}`',
                operationId: 'deleteUser',
              },
              __index: 17,
            },
            {
              tags: ['user'],
              summary: 'Get user by user name',
              description: '',
              operationId: 'getUserByName',
              produces: ['application/json', 'application/xml'],
              parameters: [
                {
                  name: 'username',
                  in: 'path',
                  description:
                    'The name that needs to be fetched. Use user1 for testing. ',
                  required: true,
                  type: 'string',
                  display: 'username',
                },
              ],
              responses: {
                200: {
                  description: 'successful operation',
                  schema: { $ref: '#/definitions/User' },
                  code: 200,
                },
                400: {
                  description: 'Invalid username supplied',
                  code: 400,
                },
                404: { description: 'User not found', code: 404 },
              },
              __id: '/user/{username}|get',
              __produce: 'application/json',
              __info: {
                description: 'Get user by user name',
                method: 'get',
                url: '/user/{username}',
                urlForCopy: '`/user/${username}`',
                operationId: 'getUserByName',
              },
              __index: 18,
            },
            {
              tags: ['user'],
              summary: 'Updated user',
              description: 'This can only be done by the logged in user.',
              operationId: 'updateUser',
              consumes: ['application/json'],
              produces: ['application/json', 'application/xml'],
              parameters: [
                {
                  name: 'username',
                  in: 'path',
                  description: 'name that need to be updated',
                  required: true,
                  type: 'string',
                  display: 'username',
                },
                {
                  in: 'body',
                  name: 'body',
                  description: 'Updated user object',
                  required: true,
                  schema: { $ref: '#/definitions/User' },
                  display: 'body',
                },
              ],
              responses: {
                400: { description: 'Invalid user supplied', code: 400 },
                404: { description: 'User not found', code: 404 },
              },
              __id: '/user/{username}|put',
              __produce: 'application/json',
              __info: {
                description: 'Updated user',
                method: 'put',
                url: '/user/{username}',
                urlForCopy: '`/user/${username}`',
                operationId: 'updateUser',
              },
              __index: 19,
            },
          ],
          matched: true,
        },
      ],
    },
    {
      swagger: '2.0',
      info: { title: 'os-admin-actions-v2.1', version: 'Unknown' },
      consumes: ['application/json'],
      produces: ['application/json'],
      paths: {
        '/v2.1/servers/{server_id}/action/{server_id}/action': {
          post: {
            operationId: 'unpauseserver',
            summary: 'Unpause server',
            description:
              'Unpauses a PAUSED server and changes its status to ACTIVE.\n',
            produces: [],
            responses: {
              202: { description: '202 response', code: 202 },
            },
          },
        },
      },
      display: 'os-admin-actions-v2.1 Unknown',
      id: 'os-admin-actions-v2.1Unknown',
      tags: [],
      namespaces: [
        {
          name: '__default__',
          description: '默认 namespace',
          apiItems: [
            {
              operationId: 'unpauseserver',
              summary: 'Unpause server',
              description:
                'Unpauses a PAUSED server and changes its status to ACTIVE.\n',
              produces: [],
              responses: {
                202: { description: '202 response', code: 202 },
              },
              __id: '/v2.1/servers/{server_id}/action/{server_id}/action|post',
              __info: {
                description: 'Unpause server',
                method: 'post',
                url: '/v2.1/servers/{server_id}/action/{server_id}/action',
                urlForCopy:
                  '`/v2.1/servers/${server_id}/action/${server_id}/action`',
                operationId: 'unpauseserver',
              },
              __index: 0,
            },
          ],
          matched: true,
        },
      ],
    },
  ],
  cache: {},
  index: { projectIndex: 0, namespaceIndex: 0, apiIndex: 1 },
  expandeds: [false, true, false, false, false, false, false, false],
  project: {
    swagger: '2.0',
    info: {
      description:
        'This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.',
      version: '1.0.5',
      title: 'Swagger Petstore',
      termsOfService: 'http://swagger.io/terms/',
      contact: { email: 'apiteam@swagger.io' },
      license: {
        name: 'Apache 2.0',
        url: 'http://www.apache.org/licenses/LICENSE-2.0.html',
      },
    },
    host: 'petstore.swagger.io',
    basePath: '/v2',
    tags: [
      {
        name: 'pet',
        description: 'Everything about your Pets',
        externalDocs: {
          description: 'Find out more',
          url: 'http://swagger.io',
        },
      },
      { name: 'store', description: 'Access to Petstore orders' },
      {
        name: 'user',
        description: 'Operations about user',
        externalDocs: {
          description: 'Find out more about our store',
          url: 'http://swagger.io',
        },
      },
    ],
    schemes: ['https', 'http'],
    paths: {
      '/pet/{petId}/uploadImage': {
        post: {
          tags: ['pet'],
          summary: 'uploads an image',
          description: '',
          operationId: 'uploadFile',
          consumes: ['multipart/form-data'],
          produces: ['application/json'],
          parameters: [
            {
              name: 'petId',
              in: 'path',
              description: 'ID of pet to update',
              required: true,
              type: 'integer',
              format: 'int64',
              display: 'petId',
            },
            {
              name: 'additionalMetadata',
              in: 'formData',
              description: 'Additional data to pass to server',
              required: false,
              type: 'string',
              display: 'additionalMetadata?',
            },
            {
              name: 'file',
              in: 'formData',
              description: 'file to upload',
              required: false,
              type: 'file',
              display: 'file?',
            },
          ],
          responses: {
            200: {
              description: 'successful operation',
              schema: { $ref: '#/definitions/ApiResponse' },
              code: 200,
            },
          },
          security: [{ petstore_auth: ['write:pets', 'read:pets'] }],
        },
      },
      '/pet': {
        post: {
          tags: ['pet'],
          summary: 'Add a new pet to the store',
          description: '',
          operationId: 'addPet',
          consumes: ['application/json', 'application/xml'],
          produces: ['application/json', 'application/xml'],
          parameters: [
            {
              in: 'body',
              name: 'body',
              description: 'Pet object that needs to be added to the store',
              required: true,
              schema: { $ref: '#/definitions/Pet' },
              display: 'body',
            },
          ],
          responses: {
            405: { description: 'Invalid input', code: 405 },
          },
          security: [{ petstore_auth: ['write:pets', 'read:pets'] }],
        },
        put: {
          tags: ['pet'],
          summary: 'Update an existing pet',
          description: '',
          operationId: 'updatePet',
          consumes: ['application/json', 'application/xml'],
          produces: ['application/json', 'application/xml'],
          parameters: [
            {
              in: 'body',
              name: 'body',
              description: 'Pet object that needs to be added to the store',
              required: true,
              schema: { $ref: '#/definitions/Pet' },
              display: 'body',
            },
          ],
          responses: {
            400: { description: 'Invalid ID supplied', code: 400 },
            404: { description: 'Pet not found', code: 404 },
            405: { description: 'Validation exception', code: 405 },
          },
          security: [{ petstore_auth: ['write:pets', 'read:pets'] }],
        },
      },
      '/pet/findByStatus': {
        get: {
          tags: ['pet'],
          summary: 'Finds Pets by status',
          description:
            'Multiple status values can be provided with comma separated strings',
          operationId: 'findPetsByStatus',
          produces: ['application/json', 'application/xml'],
          parameters: [
            {
              name: 'status',
              in: 'query',
              description:
                'Status values that need to be considered for filter',
              required: true,
              type: 'array',
              items: {
                type: 'string',
                enum: ['available', 'pending', 'sold'],
                default: 'available',
              },
              collectionFormat: 'multi',
              display: 'status',
            },
          ],
          responses: {
            200: {
              description: 'successful operation',
              schema: {
                type: 'array',
                items: { $ref: '#/definitions/Pet' },
              },
              code: 200,
            },
            400: { description: 'Invalid status value', code: 400 },
          },
          security: [{ petstore_auth: ['write:pets', 'read:pets'] }],
        },
      },
      '/pet/findByTags': {
        get: {
          tags: ['pet'],
          summary: 'Finds Pets by tags',
          description:
            'Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.',
          operationId: 'findPetsByTags',
          produces: ['application/json', 'application/xml'],
          parameters: [
            {
              name: 'tags',
              in: 'query',
              description: 'Tags to filter by',
              required: true,
              type: 'array',
              items: { type: 'string' },
              collectionFormat: 'multi',
              display: 'tags',
            },
          ],
          responses: {
            200: {
              description: 'successful operation',
              schema: {
                type: 'array',
                items: { $ref: '#/definitions/Pet' },
              },
              code: 200,
            },
            400: { description: 'Invalid tag value', code: 400 },
          },
          security: [{ petstore_auth: ['write:pets', 'read:pets'] }],
          deprecated: true,
        },
      },
      '/pet/{petId}': {
        get: {
          tags: ['pet'],
          summary: 'Find pet by ID',
          description: 'Returns a single pet',
          operationId: 'getPetById',
          produces: ['application/json', 'application/xml'],
          parameters: [
            {
              name: 'petId',
              in: 'path',
              description: 'ID of pet to return',
              required: true,
              type: 'integer',
              format: 'int64',
              display: 'petId',
            },
          ],
          responses: {
            200: {
              description: 'successful operation',
              schema: { $ref: '#/definitions/Pet' },
              code: 200,
            },
            400: { description: 'Invalid ID supplied', code: 400 },
            404: { description: 'Pet not found', code: 404 },
          },
          security: [{ api_key: [] }],
        },
        post: {
          tags: ['pet'],
          summary: 'Updates a pet in the store with form data',
          description: '',
          operationId: 'updatePetWithForm',
          consumes: ['application/x-www-form-urlencoded'],
          produces: ['application/json', 'application/xml'],
          parameters: [
            {
              name: 'petId',
              in: 'path',
              description: 'ID of pet that needs to be updated',
              required: true,
              type: 'integer',
              format: 'int64',
              display: 'petId',
            },
            {
              name: 'name',
              in: 'formData',
              description: 'Updated name of the pet',
              required: false,
              type: 'string',
              display: 'name?',
            },
            {
              name: 'status',
              in: 'formData',
              description: 'Updated status of the pet',
              required: false,
              type: 'string',
              display: 'status?',
            },
          ],
          responses: {
            405: { description: 'Invalid input', code: 405 },
          },
          security: [{ petstore_auth: ['write:pets', 'read:pets'] }],
        },
        delete: {
          tags: ['pet'],
          summary: 'Deletes a pet',
          description: '',
          operationId: 'deletePet',
          produces: ['application/json', 'application/xml'],
          parameters: [
            {
              name: 'api_key',
              in: 'header',
              required: false,
              type: 'string',
              display: 'api_key?',
            },
            {
              name: 'petId',
              in: 'path',
              description: 'Pet id to delete',
              required: true,
              type: 'integer',
              format: 'int64',
              display: 'petId',
            },
          ],
          responses: {
            400: { description: 'Invalid ID supplied', code: 400 },
            404: { description: 'Pet not found', code: 404 },
          },
          security: [{ petstore_auth: ['write:pets', 'read:pets'] }],
        },
      },
      '/store/order': {
        post: {
          tags: ['store'],
          summary: 'Place an order for a pet',
          description: '',
          operationId: 'placeOrder',
          consumes: ['application/json'],
          produces: ['application/json', 'application/xml'],
          parameters: [
            {
              in: 'body',
              name: 'body',
              description: 'order placed for purchasing the pet',
              required: true,
              schema: { $ref: '#/definitions/Order' },
              display: 'body',
            },
          ],
          responses: {
            200: {
              description: 'successful operation',
              schema: { $ref: '#/definitions/Order' },
              code: 200,
            },
            400: { description: 'Invalid Order', code: 400 },
          },
        },
      },
      '/store/order/{orderId}': {
        get: {
          tags: ['store'],
          summary: 'Find purchase order by ID',
          description:
            'For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions',
          operationId: 'getOrderById',
          produces: ['application/json', 'application/xml'],
          parameters: [
            {
              name: 'orderId',
              in: 'path',
              description: 'ID of pet that needs to be fetched',
              required: true,
              type: 'integer',
              maximum: 10,
              minimum: 1,
              format: 'int64',
              display: 'orderId',
            },
          ],
          responses: {
            200: {
              description: 'successful operation',
              schema: { $ref: '#/definitions/Order' },
              code: 200,
            },
            400: { description: 'Invalid ID supplied', code: 400 },
            404: { description: 'Order not found', code: 404 },
          },
        },
        delete: {
          tags: ['store'],
          summary: 'Delete purchase order by ID',
          description:
            'For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors',
          operationId: 'deleteOrder',
          produces: ['application/json', 'application/xml'],
          parameters: [
            {
              name: 'orderId',
              in: 'path',
              description: 'ID of the order that needs to be deleted',
              required: true,
              type: 'integer',
              minimum: 1,
              format: 'int64',
              display: 'orderId',
            },
          ],
          responses: {
            400: { description: 'Invalid ID supplied', code: 400 },
            404: { description: 'Order not found', code: 404 },
          },
        },
      },
      '/store/inventory': {
        get: {
          tags: ['store'],
          summary: 'Returns pet inventories by status',
          description: 'Returns a map of status codes to quantities',
          operationId: 'getInventory',
          produces: ['application/json'],
          parameters: [],
          responses: {
            200: {
              description: 'successful operation',
              schema: {
                type: 'object',
                additionalProperties: { type: 'integer', format: 'int32' },
              },
              code: 200,
            },
          },
          security: [{ api_key: [] }],
        },
      },
      '/user/createWithArray': {
        post: {
          tags: ['user'],
          summary: 'Creates list of users with given input array',
          description: '',
          operationId: 'createUsersWithArrayInput',
          consumes: ['application/json'],
          produces: ['application/json', 'application/xml'],
          parameters: [
            {
              in: 'body',
              name: 'body',
              description: 'List of user object',
              required: true,
              schema: {
                type: 'array',
                items: { $ref: '#/definitions/User' },
              },
              display: 'body',
            },
          ],
          responses: {
            default: { description: 'successful operation', code: null },
          },
        },
      },
      '/user/createWithList': {
        post: {
          tags: ['user'],
          summary: 'Creates list of users with given input array',
          description: '',
          operationId: 'createUsersWithListInput',
          consumes: ['application/json'],
          produces: ['application/json', 'application/xml'],
          parameters: [
            {
              in: 'body',
              name: 'body',
              description: 'List of user object',
              required: true,
              schema: {
                type: 'array',
                items: { $ref: '#/definitions/User' },
              },
              display: 'body',
            },
          ],
          responses: {
            default: { description: 'successful operation', code: null },
          },
        },
      },
      '/user/{username}': {
        get: {
          tags: ['user'],
          summary: 'Get user by user name',
          description: '',
          operationId: 'getUserByName',
          produces: ['application/json', 'application/xml'],
          parameters: [
            {
              name: 'username',
              in: 'path',
              description:
                'The name that needs to be fetched. Use user1 for testing. ',
              required: true,
              type: 'string',
              display: 'username',
            },
          ],
          responses: {
            200: {
              description: 'successful operation',
              schema: { $ref: '#/definitions/User' },
              code: 200,
            },
            400: { description: 'Invalid username supplied', code: 400 },
            404: { description: 'User not found', code: 404 },
          },
        },
        put: {
          tags: ['user'],
          summary: 'Updated user',
          description: 'This can only be done by the logged in user.',
          operationId: 'updateUser',
          consumes: ['application/json'],
          produces: ['application/json', 'application/xml'],
          parameters: [
            {
              name: 'username',
              in: 'path',
              description: 'name that need to be updated',
              required: true,
              type: 'string',
              display: 'username',
            },
            {
              in: 'body',
              name: 'body',
              description: 'Updated user object',
              required: true,
              schema: { $ref: '#/definitions/User' },
              display: 'body',
            },
          ],
          responses: {
            400: { description: 'Invalid user supplied', code: 400 },
            404: { description: 'User not found', code: 404 },
          },
        },
        delete: {
          tags: ['user'],
          summary: 'Delete user',
          description: 'This can only be done by the logged in user.',
          operationId: 'deleteUser',
          produces: ['application/json', 'application/xml'],
          parameters: [
            {
              name: 'username',
              in: 'path',
              description: 'The name that needs to be deleted',
              required: true,
              type: 'string',
              display: 'username',
            },
          ],
          responses: {
            400: { description: 'Invalid username supplied', code: 400 },
            404: { description: 'User not found', code: 404 },
          },
        },
      },
      '/user/login': {
        get: {
          tags: ['user'],
          summary: 'Logs user into the system',
          description: '',
          operationId: 'loginUser',
          produces: ['application/json', 'application/xml'],
          parameters: [
            {
              name: 'username',
              in: 'query',
              description: 'The user name for login',
              required: true,
              type: 'string',
              display: 'username',
            },
            {
              name: 'password',
              in: 'query',
              description: 'The password for login in clear text',
              required: true,
              type: 'string',
              display: 'password',
            },
          ],
          responses: {
            200: {
              description: 'successful operation',
              headers: {
                'X-Expires-After': {
                  type: 'string',
                  format: 'date-time',
                  description: 'date in UTC when token expires',
                  header: 'X-Expires-After',
                },
                'X-Rate-Limit': {
                  type: 'integer',
                  format: 'int32',
                  description: 'calls per hour allowed by the user',
                  header: 'X-Rate-Limit',
                },
              },
              schema: { type: 'string' },
              code: 200,
            },
            400: {
              description: 'Invalid username/password supplied',
              code: 400,
            },
          },
        },
      },
      '/user/logout': {
        get: {
          tags: ['user'],
          summary: 'Logs out current logged in user session',
          description: '',
          operationId: 'logoutUser',
          produces: ['application/json', 'application/xml'],
          parameters: [],
          responses: {
            default: { description: 'successful operation', code: null },
          },
        },
      },
      '/user': {
        post: {
          tags: ['user'],
          summary: 'Create user',
          description: 'This can only be done by the logged in user.',
          operationId: 'createUser',
          consumes: ['application/json'],
          produces: ['application/json', 'application/xml'],
          parameters: [
            {
              in: 'body',
              name: 'body',
              description: 'Created user object',
              required: true,
              schema: { $ref: '#/definitions/User' },
              display: 'body',
            },
          ],
          responses: {
            default: { description: 'successful operation', code: null },
          },
        },
      },
    },
    securityDefinitions: {
      api_key: { type: 'apiKey', name: 'api_key', in: 'header' },
      petstore_auth: {
        type: 'oauth2',
        authorizationUrl: 'https://petstore.swagger.io/oauth/authorize',
        flow: 'implicit',
        scopes: {
          'read:pets': 'read your pets',
          'write:pets': 'modify pets in your account',
        },
      },
    },
    definitions: {
      ApiResponse: {
        type: 'object',
        properties: {
          code: { type: 'integer', format: 'int32' },
          type: { type: 'string' },
          message: { type: 'string' },
        },
      },
      Category: {
        type: 'object',
        properties: {
          id: { type: 'integer', format: 'int64' },
          name: { type: 'string' },
        },
        xml: { name: 'Category' },
      },
      Pet: {
        type: 'object',
        required: ['name', 'photoUrls'],
        properties: {
          id: { type: 'integer', format: 'int64' },
          category: { $ref: '#/definitions/Category' },
          name: { type: 'string', example: 'doggie' },
          photoUrls: {
            type: 'array',
            xml: { wrapped: true },
            items: { type: 'string', xml: { name: 'photoUrl' } },
          },
          tags: {
            type: 'array',
            xml: { wrapped: true },
            items: { xml: { name: 'tag' }, $ref: '#/definitions/Tag' },
          },
          status: {
            type: 'string',
            description: 'pet status in the store',
            enum: ['available', 'pending', 'sold'],
          },
        },
        xml: { name: 'Pet' },
      },
      Tag: {
        type: 'object',
        properties: {
          id: { type: 'integer', format: 'int64' },
          name: { type: 'string' },
        },
        xml: { name: 'Tag' },
      },
      Order: {
        type: 'object',
        properties: {
          id: { type: 'integer', format: 'int64' },
          petId: { type: 'integer', format: 'int64' },
          quantity: { type: 'integer', format: 'int32' },
          shipDate: { type: 'string', format: 'date-time' },
          status: {
            type: 'string',
            description: 'Order Status',
            enum: ['placed', 'approved', 'delivered'],
          },
          complete: { type: 'boolean' },
        },
        xml: { name: 'Order' },
      },
      User: {
        type: 'object',
        properties: {
          id: { type: 'integer', format: 'int64' },
          username: { type: 'string' },
          firstName: { type: 'string' },
          lastName: { type: 'string' },
          email: { type: 'string' },
          password: { type: 'string' },
          phone: { type: 'string' },
          userStatus: {
            type: 'integer',
            format: 'int32',
            description: 'User Status',
          },
        },
        xml: { name: 'User' },
      },
    },
    externalDocs: {
      description: 'Find out more about Swagger',
      url: 'http://swagger.io',
    },
    updateUrl: 'https://petstore.swagger.io/v2/swagger.json',
    display: 'Swagger Petstore 1.0.5',
    id: 'Swagger%20Petstore1.0.5',
    namespaces: [
      {
        name: 'pet',
        description: 'Everything about your Pets',
        externalDocs: {
          description: 'Find out more',
          url: 'http://swagger.io',
        },
        apiItems: [
          {
            tags: ['pet'],
            summary: 'Add a new pet to the store',
            description: '',
            operationId: 'addPet',
            consumes: ['application/json', 'application/xml'],
            produces: ['application/json', 'application/xml'],
            parameters: [
              {
                in: 'body',
                name: 'body',
                description: 'Pet object that needs to be added to the store',
                required: true,
                schema: { $ref: '#/definitions/Pet' },
                display: 'body',
              },
            ],
            responses: {
              405: { description: 'Invalid input', code: 405 },
            },
            security: [{ petstore_auth: ['write:pets', 'read:pets'] }],
            __id: '/pet|post',
            __produce: 'application/json',
            __info: {
              description: 'Add a new pet to the store',
              method: 'post',
              url: '/pet',
              urlForCopy: '`/pet`',
              operationId: 'addPet',
            },
            __index: 0,
          },
          {
            tags: ['pet'],
            summary: 'Update an existing pet',
            description: '',
            operationId: 'updatePet',
            consumes: ['application/json', 'application/xml'],
            produces: ['application/json', 'application/xml'],
            parameters: [
              {
                in: 'body',
                name: 'body',
                description: 'Pet object that needs to be added to the store',
                required: true,
                schema: { $ref: '#/definitions/Pet' },
                display: 'body',
              },
            ],
            responses: {
              400: { description: 'Invalid ID supplied', code: 400 },
              404: { description: 'Pet not found', code: 404 },
              405: { description: 'Validation exception', code: 405 },
            },
            security: [{ petstore_auth: ['write:pets', 'read:pets'] }],
            __id: '/pet|put',
            __produce: 'application/json',
            __info: {
              description: 'Update an existing pet',
              method: 'put',
              url: '/pet',
              urlForCopy: '`/pet`',
              operationId: 'updatePet',
            },
            __index: 1,
          },
          {
            tags: ['pet'],
            summary: 'Finds Pets by status',
            description:
              'Multiple status values can be provided with comma separated strings',
            operationId: 'findPetsByStatus',
            produces: ['application/json', 'application/xml'],
            parameters: [
              {
                name: 'status',
                in: 'query',
                description:
                  'Status values that need to be considered for filter',
                required: true,
                type: 'array',
                items: {
                  type: 'string',
                  enum: ['available', 'pending', 'sold'],
                  default: 'available',
                },
                collectionFormat: 'multi',
                display: 'status',
              },
            ],
            responses: {
              200: {
                description: 'successful operation',
                schema: {
                  type: 'array',
                  items: { $ref: '#/definitions/Pet' },
                },
                code: 200,
              },
              400: { description: 'Invalid status value', code: 400 },
            },
            security: [{ petstore_auth: ['write:pets', 'read:pets'] }],
            __id: '/pet/findByStatus|get',
            __produce: 'application/json',
            __info: {
              description: 'Finds Pets by status',
              method: 'get',
              url: '/pet/findByStatus',
              urlForCopy: '`/pet/findByStatus`',
              operationId: 'findPetsByStatus',
            },
            __index: 2,
          },
          {
            tags: ['pet'],
            summary: 'Finds Pets by tags',
            description:
              'Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.',
            operationId: 'findPetsByTags',
            produces: ['application/json', 'application/xml'],
            parameters: [
              {
                name: 'tags',
                in: 'query',
                description: 'Tags to filter by',
                required: true,
                type: 'array',
                items: { type: 'string' },
                collectionFormat: 'multi',
                display: 'tags',
              },
            ],
            responses: {
              200: {
                description: 'successful operation',
                schema: {
                  type: 'array',
                  items: { $ref: '#/definitions/Pet' },
                },
                code: 200,
              },
              400: { description: 'Invalid tag value', code: 400 },
            },
            security: [{ petstore_auth: ['write:pets', 'read:pets'] }],
            deprecated: true,
            __id: '/pet/findByTags|get',
            __produce: 'application/json',
            __info: {
              description: 'Finds Pets by tags',
              method: 'get',
              url: '/pet/findByTags',
              deprecated: true,
              urlForCopy: '`/pet/findByTags`',
              operationId: 'findPetsByTags',
            },
            __index: 3,
          },
          {
            tags: ['pet'],
            summary: 'Deletes a pet',
            description: '',
            operationId: 'deletePet',
            produces: ['application/json', 'application/xml'],
            parameters: [
              {
                name: 'api_key',
                in: 'header',
                required: false,
                type: 'string',
                display: 'api_key?',
              },
              {
                name: 'petId',
                in: 'path',
                description: 'Pet id to delete',
                required: true,
                type: 'integer',
                format: 'int64',
                display: 'petId',
              },
            ],
            responses: {
              400: { description: 'Invalid ID supplied', code: 400 },
              404: { description: 'Pet not found', code: 404 },
            },
            security: [{ petstore_auth: ['write:pets', 'read:pets'] }],
            __id: '/pet/{petId}|delete',
            __produce: 'application/json',
            __info: {
              description: 'Deletes a pet',
              method: 'delete',
              url: '/pet/{petId}',
              urlForCopy: '`/pet/${petId}`',
              operationId: 'deletePet',
            },
            __index: 4,
          },
          {
            tags: ['pet'],
            summary: 'Find pet by ID',
            description: 'Returns a single pet',
            operationId: 'getPetById',
            produces: ['application/json', 'application/xml'],
            parameters: [
              {
                name: 'petId',
                in: 'path',
                description: 'ID of pet to return',
                required: true,
                type: 'integer',
                format: 'int64',
                display: 'petId',
              },
            ],
            responses: {
              200: {
                description: 'successful operation',
                schema: { $ref: '#/definitions/Pet' },
                code: 200,
              },
              400: { description: 'Invalid ID supplied', code: 400 },
              404: { description: 'Pet not found', code: 404 },
            },
            security: [{ api_key: [] }],
            __id: '/pet/{petId}|get',
            __produce: 'application/json',
            __info: {
              description: 'Find pet by ID',
              method: 'get',
              url: '/pet/{petId}',
              urlForCopy: '`/pet/${petId}`',
              operationId: 'getPetById',
            },
            __index: 5,
          },
          {
            tags: ['pet'],
            summary: 'Updates a pet in the store with form data',
            description: '',
            operationId: 'updatePetWithForm',
            consumes: ['application/x-www-form-urlencoded'],
            produces: ['application/json', 'application/xml'],
            parameters: [
              {
                name: 'petId',
                in: 'path',
                description: 'ID of pet that needs to be updated',
                required: true,
                type: 'integer',
                format: 'int64',
                display: 'petId',
              },
              {
                name: 'name',
                in: 'formData',
                description: 'Updated name of the pet',
                required: false,
                type: 'string',
                display: 'name?',
              },
              {
                name: 'status',
                in: 'formData',
                description: 'Updated status of the pet',
                required: false,
                type: 'string',
                display: 'status?',
              },
            ],
            responses: {
              405: { description: 'Invalid input', code: 405 },
            },
            security: [{ petstore_auth: ['write:pets', 'read:pets'] }],
            __id: '/pet/{petId}|post',
            __produce: 'application/json',
            __info: {
              description: 'Updates a pet in the store with form data',
              method: 'post',
              url: '/pet/{petId}',
              urlForCopy: '`/pet/${petId}`',
              operationId: 'updatePetWithForm',
            },
            __index: 6,
          },
          {
            tags: ['pet'],
            summary: 'uploads an image',
            description: '',
            operationId: 'uploadFile',
            consumes: ['multipart/form-data'],
            produces: ['application/json'],
            parameters: [
              {
                name: 'petId',
                in: 'path',
                description: 'ID of pet to update',
                required: true,
                type: 'integer',
                format: 'int64',
                display: 'petId',
              },
              {
                name: 'additionalMetadata',
                in: 'formData',
                description: 'Additional data to pass to server',
                required: false,
                type: 'string',
                display: 'additionalMetadata?',
              },
              {
                name: 'file',
                in: 'formData',
                description: 'file to upload',
                required: false,
                type: 'file',
                display: 'file?',
              },
            ],
            responses: {
              200: {
                description: 'successful operation',
                schema: { $ref: '#/definitions/ApiResponse' },
                code: 200,
              },
            },
            security: [{ petstore_auth: ['write:pets', 'read:pets'] }],
            __id: '/pet/{petId}/uploadImage|post',
            __produce: 'application/json',
            __info: {
              description: 'uploads an image',
              method: 'post',
              url: '/pet/{petId}/uploadImage',
              urlForCopy: '`/pet/${petId}/uploadImage`',
              operationId: 'uploadFile',
            },
            __index: 7,
          },
        ],
        matched: true,
      },
      {
        name: 'store',
        description: 'Access to Petstore orders',
        apiItems: [
          {
            tags: ['store'],
            summary: 'Returns pet inventories by status',
            description: 'Returns a map of status codes to quantities',
            operationId: 'getInventory',
            produces: ['application/json'],
            parameters: [],
            responses: {
              200: {
                description: 'successful operation',
                schema: {
                  type: 'object',
                  additionalProperties: {
                    type: 'integer',
                    format: 'int32',
                  },
                },
                code: 200,
              },
            },
            security: [{ api_key: [] }],
            __id: '/store/inventory|get',
            __produce: 'application/json',
            __info: {
              description: 'Returns pet inventories by status',
              method: 'get',
              url: '/store/inventory',
              urlForCopy: '`/store/inventory`',
              operationId: 'getInventory',
            },
            __index: 8,
          },
          {
            tags: ['store'],
            summary: 'Place an order for a pet',
            description: '',
            operationId: 'placeOrder',
            consumes: ['application/json'],
            produces: ['application/json', 'application/xml'],
            parameters: [
              {
                in: 'body',
                name: 'body',
                description: 'order placed for purchasing the pet',
                required: true,
                schema: { $ref: '#/definitions/Order' },
                display: 'body',
              },
            ],
            responses: {
              200: {
                description: 'successful operation',
                schema: { $ref: '#/definitions/Order' },
                code: 200,
              },
              400: { description: 'Invalid Order', code: 400 },
            },
            __id: '/store/order|post',
            __produce: 'application/json',
            __info: {
              description: 'Place an order for a pet',
              method: 'post',
              url: '/store/order',
              urlForCopy: '`/store/order`',
              operationId: 'placeOrder',
            },
            __index: 9,
          },
          {
            tags: ['store'],
            summary: 'Delete purchase order by ID',
            description:
              'For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors',
            operationId: 'deleteOrder',
            produces: ['application/json', 'application/xml'],
            parameters: [
              {
                name: 'orderId',
                in: 'path',
                description: 'ID of the order that needs to be deleted',
                required: true,
                type: 'integer',
                minimum: 1,
                format: 'int64',
                display: 'orderId',
              },
            ],
            responses: {
              400: { description: 'Invalid ID supplied', code: 400 },
              404: { description: 'Order not found', code: 404 },
            },
            __id: '/store/order/{orderId}|delete',
            __produce: 'application/json',
            __info: {
              description: 'Delete purchase order by ID',
              method: 'delete',
              url: '/store/order/{orderId}',
              urlForCopy: '`/store/order/${orderId}`',
              operationId: 'deleteOrder',
            },
            __index: 10,
          },
          {
            tags: ['store'],
            summary: 'Find purchase order by ID',
            description:
              'For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions',
            operationId: 'getOrderById',
            produces: ['application/json', 'application/xml'],
            parameters: [
              {
                name: 'orderId',
                in: 'path',
                description: 'ID of pet that needs to be fetched',
                required: true,
                type: 'integer',
                maximum: 10,
                minimum: 1,
                format: 'int64',
                display: 'orderId',
              },
            ],
            responses: {
              200: {
                description: 'successful operation',
                schema: { $ref: '#/definitions/Order' },
                code: 200,
              },
              400: { description: 'Invalid ID supplied', code: 400 },
              404: { description: 'Order not found', code: 404 },
            },
            __id: '/store/order/{orderId}|get',
            __produce: 'application/json',
            __info: {
              description: 'Find purchase order by ID',
              method: 'get',
              url: '/store/order/{orderId}',
              urlForCopy: '`/store/order/${orderId}`',
              operationId: 'getOrderById',
            },
            __index: 11,
          },
        ],
        matched: true,
      },
      {
        name: 'user',
        description: 'Operations about user',
        externalDocs: {
          description: 'Find out more about our store',
          url: 'http://swagger.io',
        },
        apiItems: [
          {
            tags: ['user'],
            summary: 'Create user',
            description: 'This can only be done by the logged in user.',
            operationId: 'createUser',
            consumes: ['application/json'],
            produces: ['application/json', 'application/xml'],
            parameters: [
              {
                in: 'body',
                name: 'body',
                description: 'Created user object',
                required: true,
                schema: { $ref: '#/definitions/User' },
                display: 'body',
              },
            ],
            responses: {
              default: { description: 'successful operation', code: null },
            },
            __id: '/user|post',
            __produce: 'application/json',
            __info: {
              description: 'Create user',
              method: 'post',
              url: '/user',
              urlForCopy: '`/user`',
              operationId: 'createUser',
            },
            __index: 12,
          },
          {
            tags: ['user'],
            summary: 'Creates list of users with given input array',
            description: '',
            operationId: 'createUsersWithArrayInput',
            consumes: ['application/json'],
            produces: ['application/json', 'application/xml'],
            parameters: [
              {
                in: 'body',
                name: 'body',
                description: 'List of user object',
                required: true,
                schema: {
                  type: 'array',
                  items: { $ref: '#/definitions/User' },
                },
                display: 'body',
              },
            ],
            responses: {
              default: { description: 'successful operation', code: null },
            },
            __id: '/user/createWithArray|post',
            __produce: 'application/json',
            __info: {
              description: 'Creates list of users with given input array',
              method: 'post',
              url: '/user/createWithArray',
              urlForCopy: '`/user/createWithArray`',
              operationId: 'createUsersWithArrayInput',
            },
            __index: 13,
          },
          {
            tags: ['user'],
            summary: 'Creates list of users with given input array',
            description: '',
            operationId: 'createUsersWithListInput',
            consumes: ['application/json'],
            produces: ['application/json', 'application/xml'],
            parameters: [
              {
                in: 'body',
                name: 'body',
                description: 'List of user object',
                required: true,
                schema: {
                  type: 'array',
                  items: { $ref: '#/definitions/User' },
                },
                display: 'body',
              },
            ],
            responses: {
              default: { description: 'successful operation', code: null },
            },
            __id: '/user/createWithList|post',
            __produce: 'application/json',
            __info: {
              description: 'Creates list of users with given input array',
              method: 'post',
              url: '/user/createWithList',
              urlForCopy: '`/user/createWithList`',
              operationId: 'createUsersWithListInput',
            },
            __index: 14,
          },
          {
            tags: ['user'],
            summary: 'Logs user into the system',
            description: '',
            operationId: 'loginUser',
            produces: ['application/json', 'application/xml'],
            parameters: [
              {
                name: 'username',
                in: 'query',
                description: 'The user name for login',
                required: true,
                type: 'string',
                display: 'username',
              },
              {
                name: 'password',
                in: 'query',
                description: 'The password for login in clear text',
                required: true,
                type: 'string',
                display: 'password',
              },
            ],
            responses: {
              200: {
                description: 'successful operation',
                headers: {
                  'X-Expires-After': {
                    type: 'string',
                    format: 'date-time',
                    description: 'date in UTC when token expires',
                    header: 'X-Expires-After',
                  },
                  'X-Rate-Limit': {
                    type: 'integer',
                    format: 'int32',
                    description: 'calls per hour allowed by the user',
                    header: 'X-Rate-Limit',
                  },
                },
                schema: { type: 'string' },
                code: 200,
              },
              400: {
                description: 'Invalid username/password supplied',
                code: 400,
              },
            },
            __id: '/user/login|get',
            __produce: 'application/json',
            __info: {
              description: 'Logs user into the system',
              method: 'get',
              url: '/user/login',
              urlForCopy: '`/user/login`',
              operationId: 'loginUser',
            },
            __index: 15,
          },
          {
            tags: ['user'],
            summary: 'Logs out current logged in user session',
            description: '',
            operationId: 'logoutUser',
            produces: ['application/json', 'application/xml'],
            parameters: [],
            responses: {
              default: { description: 'successful operation', code: null },
            },
            __id: '/user/logout|get',
            __produce: 'application/json',
            __info: {
              description: 'Logs out current logged in user session',
              method: 'get',
              url: '/user/logout',
              urlForCopy: '`/user/logout`',
              operationId: 'logoutUser',
            },
            __index: 16,
          },
          {
            tags: ['user'],
            summary: 'Delete user',
            description: 'This can only be done by the logged in user.',
            operationId: 'deleteUser',
            produces: ['application/json', 'application/xml'],
            parameters: [
              {
                name: 'username',
                in: 'path',
                description: 'The name that needs to be deleted',
                required: true,
                type: 'string',
                display: 'username',
              },
            ],
            responses: {
              400: {
                description: 'Invalid username supplied',
                code: 400,
              },
              404: { description: 'User not found', code: 404 },
            },
            __id: '/user/{username}|delete',
            __produce: 'application/json',
            __info: {
              description: 'Delete user',
              method: 'delete',
              url: '/user/{username}',
              urlForCopy: '`/user/${username}`',
              operationId: 'deleteUser',
            },
            __index: 17,
          },
          {
            tags: ['user'],
            summary: 'Get user by user name',
            description: '',
            operationId: 'getUserByName',
            produces: ['application/json', 'application/xml'],
            parameters: [
              {
                name: 'username',
                in: 'path',
                description:
                  'The name that needs to be fetched. Use user1 for testing. ',
                required: true,
                type: 'string',
                display: 'username',
              },
            ],
            responses: {
              200: {
                description: 'successful operation',
                schema: { $ref: '#/definitions/User' },
                code: 200,
              },
              400: {
                description: 'Invalid username supplied',
                code: 400,
              },
              404: { description: 'User not found', code: 404 },
            },
            __id: '/user/{username}|get',
            __produce: 'application/json',
            __info: {
              description: 'Get user by user name',
              method: 'get',
              url: '/user/{username}',
              urlForCopy: '`/user/${username}`',
              operationId: 'getUserByName',
            },
            __index: 18,
          },
          {
            tags: ['user'],
            summary: 'Updated user',
            description: 'This can only be done by the logged in user.',
            operationId: 'updateUser',
            consumes: ['application/json'],
            produces: ['application/json', 'application/xml'],
            parameters: [
              {
                name: 'username',
                in: 'path',
                description: 'name that need to be updated',
                required: true,
                type: 'string',
                display: 'username',
              },
              {
                in: 'body',
                name: 'body',
                description: 'Updated user object',
                required: true,
                schema: { $ref: '#/definitions/User' },
                display: 'body',
              },
            ],
            responses: {
              400: { description: 'Invalid user supplied', code: 400 },
              404: { description: 'User not found', code: 404 },
            },
            __id: '/user/{username}|put',
            __produce: 'application/json',
            __info: {
              description: 'Updated user',
              method: 'put',
              url: '/user/{username}',
              urlForCopy: '`/user/${username}`',
              operationId: 'updateUser',
            },
            __index: 19,
          },
        ],
        matched: true,
      },
    ],
  },
  namespaces: [
    {
      name: 'pet',
      description: 'Everything about your Pets',
      externalDocs: {
        description: 'Find out more',
        url: 'http://swagger.io',
      },
      apiItems: [
        {
          tags: ['pet'],
          summary: 'Add a new pet to the store',
          description: '',
          operationId: 'addPet',
          consumes: ['application/json', 'application/xml'],
          produces: ['application/json', 'application/xml'],
          parameters: [
            {
              in: 'body',
              name: 'body',
              description: 'Pet object that needs to be added to the store',
              required: true,
              schema: { $ref: '#/definitions/Pet' },
              display: 'body',
            },
          ],
          responses: {
            405: { description: 'Invalid input', code: 405 },
          },
          security: [{ petstore_auth: ['write:pets', 'read:pets'] }],
          __id: '/pet|post',
          __produce: 'application/json',
          __info: {
            description: 'Add a new pet to the store',
            method: 'post',
            url: '/pet',
            urlForCopy: '`/pet`',
            operationId: 'addPet',
          },
          __index: 0,
        },
        {
          tags: ['pet'],
          summary: 'Update an existing pet',
          description: '',
          operationId: 'updatePet',
          consumes: ['application/json', 'application/xml'],
          produces: ['application/json', 'application/xml'],
          parameters: [
            {
              in: 'body',
              name: 'body',
              description: 'Pet object that needs to be added to the store',
              required: true,
              schema: { $ref: '#/definitions/Pet' },
              display: 'body',
            },
          ],
          responses: {
            400: { description: 'Invalid ID supplied', code: 400 },
            404: { description: 'Pet not found', code: 404 },
            405: { description: 'Validation exception', code: 405 },
          },
          security: [{ petstore_auth: ['write:pets', 'read:pets'] }],
          __id: '/pet|put',
          __produce: 'application/json',
          __info: {
            description: 'Update an existing pet',
            method: 'put',
            url: '/pet',
            urlForCopy: '`/pet`',
            operationId: 'updatePet',
          },
          __index: 1,
        },
        {
          tags: ['pet'],
          summary: 'Finds Pets by status',
          description:
            'Multiple status values can be provided with comma separated strings',
          operationId: 'findPetsByStatus',
          produces: ['application/json', 'application/xml'],
          parameters: [
            {
              name: 'status',
              in: 'query',
              description:
                'Status values that need to be considered for filter',
              required: true,
              type: 'array',
              items: {
                type: 'string',
                enum: ['available', 'pending', 'sold'],
                default: 'available',
              },
              collectionFormat: 'multi',
              display: 'status',
            },
          ],
          responses: {
            200: {
              description: 'successful operation',
              schema: {
                type: 'array',
                items: { $ref: '#/definitions/Pet' },
              },
              code: 200,
            },
            400: { description: 'Invalid status value', code: 400 },
          },
          security: [{ petstore_auth: ['write:pets', 'read:pets'] }],
          __id: '/pet/findByStatus|get',
          __produce: 'application/json',
          __info: {
            description: 'Finds Pets by status',
            method: 'get',
            url: '/pet/findByStatus',
            urlForCopy: '`/pet/findByStatus`',
            operationId: 'findPetsByStatus',
          },
          __index: 2,
        },
        {
          tags: ['pet'],
          summary: 'Finds Pets by tags',
          description:
            'Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.',
          operationId: 'findPetsByTags',
          produces: ['application/json', 'application/xml'],
          parameters: [
            {
              name: 'tags',
              in: 'query',
              description: 'Tags to filter by',
              required: true,
              type: 'array',
              items: { type: 'string' },
              collectionFormat: 'multi',
              display: 'tags',
            },
          ],
          responses: {
            200: {
              description: 'successful operation',
              schema: {
                type: 'array',
                items: { $ref: '#/definitions/Pet' },
              },
              code: 200,
            },
            400: { description: 'Invalid tag value', code: 400 },
          },
          security: [{ petstore_auth: ['write:pets', 'read:pets'] }],
          deprecated: true,
          __id: '/pet/findByTags|get',
          __produce: 'application/json',
          __info: {
            description: 'Finds Pets by tags',
            method: 'get',
            url: '/pet/findByTags',
            deprecated: true,
            urlForCopy: '`/pet/findByTags`',
            operationId: 'findPetsByTags',
          },
          __index: 3,
        },
        {
          tags: ['pet'],
          summary: 'Deletes a pet',
          description: '',
          operationId: 'deletePet',
          produces: ['application/json', 'application/xml'],
          parameters: [
            {
              name: 'api_key',
              in: 'header',
              required: false,
              type: 'string',
              display: 'api_key?',
            },
            {
              name: 'petId',
              in: 'path',
              description: 'Pet id to delete',
              required: true,
              type: 'integer',
              format: 'int64',
              display: 'petId',
            },
          ],
          responses: {
            400: { description: 'Invalid ID supplied', code: 400 },
            404: { description: 'Pet not found', code: 404 },
          },
          security: [{ petstore_auth: ['write:pets', 'read:pets'] }],
          __id: '/pet/{petId}|delete',
          __produce: 'application/json',
          __info: {
            description: 'Deletes a pet',
            method: 'delete',
            url: '/pet/{petId}',
            urlForCopy: '`/pet/${petId}`',
            operationId: 'deletePet',
          },
          __index: 4,
        },
        {
          tags: ['pet'],
          summary: 'Find pet by ID',
          description: 'Returns a single pet',
          operationId: 'getPetById',
          produces: ['application/json', 'application/xml'],
          parameters: [
            {
              name: 'petId',
              in: 'path',
              description: 'ID of pet to return',
              required: true,
              type: 'integer',
              format: 'int64',
              display: 'petId',
            },
          ],
          responses: {
            200: {
              description: 'successful operation',
              schema: { $ref: '#/definitions/Pet' },
              code: 200,
            },
            400: { description: 'Invalid ID supplied', code: 400 },
            404: { description: 'Pet not found', code: 404 },
          },
          security: [{ api_key: [] }],
          __id: '/pet/{petId}|get',
          __produce: 'application/json',
          __info: {
            description: 'Find pet by ID',
            method: 'get',
            url: '/pet/{petId}',
            urlForCopy: '`/pet/${petId}`',
            operationId: 'getPetById',
          },
          __index: 5,
        },
        {
          tags: ['pet'],
          summary: 'Updates a pet in the store with form data',
          description: '',
          operationId: 'updatePetWithForm',
          consumes: ['application/x-www-form-urlencoded'],
          produces: ['application/json', 'application/xml'],
          parameters: [
            {
              name: 'petId',
              in: 'path',
              description: 'ID of pet that needs to be updated',
              required: true,
              type: 'integer',
              format: 'int64',
              display: 'petId',
            },
            {
              name: 'name',
              in: 'formData',
              description: 'Updated name of the pet',
              required: false,
              type: 'string',
              display: 'name?',
            },
            {
              name: 'status',
              in: 'formData',
              description: 'Updated status of the pet',
              required: false,
              type: 'string',
              display: 'status?',
            },
          ],
          responses: {
            405: { description: 'Invalid input', code: 405 },
          },
          security: [{ petstore_auth: ['write:pets', 'read:pets'] }],
          __id: '/pet/{petId}|post',
          __produce: 'application/json',
          __info: {
            description: 'Updates a pet in the store with form data',
            method: 'post',
            url: '/pet/{petId}',
            urlForCopy: '`/pet/${petId}`',
            operationId: 'updatePetWithForm',
          },
          __index: 6,
        },
        {
          tags: ['pet'],
          summary: 'uploads an image',
          description: '',
          operationId: 'uploadFile',
          consumes: ['multipart/form-data'],
          produces: ['application/json'],
          parameters: [
            {
              name: 'petId',
              in: 'path',
              description: 'ID of pet to update',
              required: true,
              type: 'integer',
              format: 'int64',
              display: 'petId',
            },
            {
              name: 'additionalMetadata',
              in: 'formData',
              description: 'Additional data to pass to server',
              required: false,
              type: 'string',
              display: 'additionalMetadata?',
            },
            {
              name: 'file',
              in: 'formData',
              description: 'file to upload',
              required: false,
              type: 'file',
              display: 'file?',
            },
          ],
          responses: {
            200: {
              description: 'successful operation',
              schema: { $ref: '#/definitions/ApiResponse' },
              code: 200,
            },
          },
          security: [{ petstore_auth: ['write:pets', 'read:pets'] }],
          __id: '/pet/{petId}/uploadImage|post',
          __produce: 'application/json',
          __info: {
            description: 'uploads an image',
            method: 'post',
            url: '/pet/{petId}/uploadImage',
            urlForCopy: '`/pet/${petId}/uploadImage`',
            operationId: 'uploadFile',
          },
          __index: 7,
        },
      ],
      matched: true,
    },
    {
      name: 'store',
      description: 'Access to Petstore orders',
      apiItems: [
        {
          tags: ['store'],
          summary: 'Returns pet inventories by status',
          description: 'Returns a map of status codes to quantities',
          operationId: 'getInventory',
          produces: ['application/json'],
          parameters: [],
          responses: {
            200: {
              description: 'successful operation',
              schema: {
                type: 'object',
                additionalProperties: { type: 'integer', format: 'int32' },
              },
              code: 200,
            },
          },
          security: [{ api_key: [] }],
          __id: '/store/inventory|get',
          __produce: 'application/json',
          __info: {
            description: 'Returns pet inventories by status',
            method: 'get',
            url: '/store/inventory',
            urlForCopy: '`/store/inventory`',
            operationId: 'getInventory',
          },
          __index: 8,
        },
        {
          tags: ['store'],
          summary: 'Place an order for a pet',
          description: '',
          operationId: 'placeOrder',
          consumes: ['application/json'],
          produces: ['application/json', 'application/xml'],
          parameters: [
            {
              in: 'body',
              name: 'body',
              description: 'order placed for purchasing the pet',
              required: true,
              schema: { $ref: '#/definitions/Order' },
              display: 'body',
            },
          ],
          responses: {
            200: {
              description: 'successful operation',
              schema: { $ref: '#/definitions/Order' },
              code: 200,
            },
            400: { description: 'Invalid Order', code: 400 },
          },
          __id: '/store/order|post',
          __produce: 'application/json',
          __info: {
            description: 'Place an order for a pet',
            method: 'post',
            url: '/store/order',
            urlForCopy: '`/store/order`',
            operationId: 'placeOrder',
          },
          __index: 9,
        },
        {
          tags: ['store'],
          summary: 'Delete purchase order by ID',
          description:
            'For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors',
          operationId: 'deleteOrder',
          produces: ['application/json', 'application/xml'],
          parameters: [
            {
              name: 'orderId',
              in: 'path',
              description: 'ID of the order that needs to be deleted',
              required: true,
              type: 'integer',
              minimum: 1,
              format: 'int64',
              display: 'orderId',
            },
          ],
          responses: {
            400: { description: 'Invalid ID supplied', code: 400 },
            404: { description: 'Order not found', code: 404 },
          },
          __id: '/store/order/{orderId}|delete',
          __produce: 'application/json',
          __info: {
            description: 'Delete purchase order by ID',
            method: 'delete',
            url: '/store/order/{orderId}',
            urlForCopy: '`/store/order/${orderId}`',
            operationId: 'deleteOrder',
          },
          __index: 10,
        },
        {
          tags: ['store'],
          summary: 'Find purchase order by ID',
          description:
            'For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions',
          operationId: 'getOrderById',
          produces: ['application/json', 'application/xml'],
          parameters: [
            {
              name: 'orderId',
              in: 'path',
              description: 'ID of pet that needs to be fetched',
              required: true,
              type: 'integer',
              maximum: 10,
              minimum: 1,
              format: 'int64',
              display: 'orderId',
            },
          ],
          responses: {
            200: {
              description: 'successful operation',
              schema: { $ref: '#/definitions/Order' },
              code: 200,
            },
            400: { description: 'Invalid ID supplied', code: 400 },
            404: { description: 'Order not found', code: 404 },
          },
          __id: '/store/order/{orderId}|get',
          __produce: 'application/json',
          __info: {
            description: 'Find purchase order by ID',
            method: 'get',
            url: '/store/order/{orderId}',
            urlForCopy: '`/store/order/${orderId}`',
            operationId: 'getOrderById',
          },
          __index: 11,
        },
      ],
      matched: true,
    },
    {
      name: 'user',
      description: 'Operations about user',
      externalDocs: {
        description: 'Find out more about our store',
        url: 'http://swagger.io',
      },
      apiItems: [
        {
          tags: ['user'],
          summary: 'Create user',
          description: 'This can only be done by the logged in user.',
          operationId: 'createUser',
          consumes: ['application/json'],
          produces: ['application/json', 'application/xml'],
          parameters: [
            {
              in: 'body',
              name: 'body',
              description: 'Created user object',
              required: true,
              schema: { $ref: '#/definitions/User' },
              display: 'body',
            },
          ],
          responses: {
            default: { description: 'successful operation', code: null },
          },
          __id: '/user|post',
          __produce: 'application/json',
          __info: {
            description: 'Create user',
            method: 'post',
            url: '/user',
            urlForCopy: '`/user`',
            operationId: 'createUser',
          },
          __index: 12,
        },
        {
          tags: ['user'],
          summary: 'Creates list of users with given input array',
          description: '',
          operationId: 'createUsersWithArrayInput',
          consumes: ['application/json'],
          produces: ['application/json', 'application/xml'],
          parameters: [
            {
              in: 'body',
              name: 'body',
              description: 'List of user object',
              required: true,
              schema: {
                type: 'array',
                items: { $ref: '#/definitions/User' },
              },
              display: 'body',
            },
          ],
          responses: {
            default: { description: 'successful operation', code: null },
          },
          __id: '/user/createWithArray|post',
          __produce: 'application/json',
          __info: {
            description: 'Creates list of users with given input array',
            method: 'post',
            url: '/user/createWithArray',
            urlForCopy: '`/user/createWithArray`',
            operationId: 'createUsersWithArrayInput',
          },
          __index: 13,
        },
        {
          tags: ['user'],
          summary: 'Creates list of users with given input array',
          description: '',
          operationId: 'createUsersWithListInput',
          consumes: ['application/json'],
          produces: ['application/json', 'application/xml'],
          parameters: [
            {
              in: 'body',
              name: 'body',
              description: 'List of user object',
              required: true,
              schema: {
                type: 'array',
                items: { $ref: '#/definitions/User' },
              },
              display: 'body',
            },
          ],
          responses: {
            default: { description: 'successful operation', code: null },
          },
          __id: '/user/createWithList|post',
          __produce: 'application/json',
          __info: {
            description: 'Creates list of users with given input array',
            method: 'post',
            url: '/user/createWithList',
            urlForCopy: '`/user/createWithList`',
            operationId: 'createUsersWithListInput',
          },
          __index: 14,
        },
        {
          tags: ['user'],
          summary: 'Logs user into the system',
          description: '',
          operationId: 'loginUser',
          produces: ['application/json', 'application/xml'],
          parameters: [
            {
              name: 'username',
              in: 'query',
              description: 'The user name for login',
              required: true,
              type: 'string',
              display: 'username',
            },
            {
              name: 'password',
              in: 'query',
              description: 'The password for login in clear text',
              required: true,
              type: 'string',
              display: 'password',
            },
          ],
          responses: {
            200: {
              description: 'successful operation',
              headers: {
                'X-Expires-After': {
                  type: 'string',
                  format: 'date-time',
                  description: 'date in UTC when token expires',
                  header: 'X-Expires-After',
                },
                'X-Rate-Limit': {
                  type: 'integer',
                  format: 'int32',
                  description: 'calls per hour allowed by the user',
                  header: 'X-Rate-Limit',
                },
              },
              schema: { type: 'string' },
              code: 200,
            },
            400: {
              description: 'Invalid username/password supplied',
              code: 400,
            },
          },
          __id: '/user/login|get',
          __produce: 'application/json',
          __info: {
            description: 'Logs user into the system',
            method: 'get',
            url: '/user/login',
            urlForCopy: '`/user/login`',
            operationId: 'loginUser',
          },
          __index: 15,
        },
        {
          tags: ['user'],
          summary: 'Logs out current logged in user session',
          description: '',
          operationId: 'logoutUser',
          produces: ['application/json', 'application/xml'],
          parameters: [],
          responses: {
            default: { description: 'successful operation', code: null },
          },
          __id: '/user/logout|get',
          __produce: 'application/json',
          __info: {
            description: 'Logs out current logged in user session',
            method: 'get',
            url: '/user/logout',
            urlForCopy: '`/user/logout`',
            operationId: 'logoutUser',
          },
          __index: 16,
        },
        {
          tags: ['user'],
          summary: 'Delete user',
          description: 'This can only be done by the logged in user.',
          operationId: 'deleteUser',
          produces: ['application/json', 'application/xml'],
          parameters: [
            {
              name: 'username',
              in: 'path',
              description: 'The name that needs to be deleted',
              required: true,
              type: 'string',
              display: 'username',
            },
          ],
          responses: {
            400: { description: 'Invalid username supplied', code: 400 },
            404: { description: 'User not found', code: 404 },
          },
          __id: '/user/{username}|delete',
          __produce: 'application/json',
          __info: {
            description: 'Delete user',
            method: 'delete',
            url: '/user/{username}',
            urlForCopy: '`/user/${username}`',
            operationId: 'deleteUser',
          },
          __index: 17,
        },
        {
          tags: ['user'],
          summary: 'Get user by user name',
          description: '',
          operationId: 'getUserByName',
          produces: ['application/json', 'application/xml'],
          parameters: [
            {
              name: 'username',
              in: 'path',
              description:
                'The name that needs to be fetched. Use user1 for testing. ',
              required: true,
              type: 'string',
              display: 'username',
            },
          ],
          responses: {
            200: {
              description: 'successful operation',
              schema: { $ref: '#/definitions/User' },
              code: 200,
            },
            400: { description: 'Invalid username supplied', code: 400 },
            404: { description: 'User not found', code: 404 },
          },
          __id: '/user/{username}|get',
          __produce: 'application/json',
          __info: {
            description: 'Get user by user name',
            method: 'get',
            url: '/user/{username}',
            urlForCopy: '`/user/${username}`',
            operationId: 'getUserByName',
          },
          __index: 18,
        },
        {
          tags: ['user'],
          summary: 'Updated user',
          description: 'This can only be done by the logged in user.',
          operationId: 'updateUser',
          consumes: ['application/json'],
          produces: ['application/json', 'application/xml'],
          parameters: [
            {
              name: 'username',
              in: 'path',
              description: 'name that need to be updated',
              required: true,
              type: 'string',
              display: 'username',
            },
            {
              in: 'body',
              name: 'body',
              description: 'Updated user object',
              required: true,
              schema: { $ref: '#/definitions/User' },
              display: 'body',
            },
          ],
          responses: {
            400: { description: 'Invalid user supplied', code: 400 },
            404: { description: 'User not found', code: 404 },
          },
          __id: '/user/{username}|put',
          __produce: 'application/json',
          __info: {
            description: 'Updated user',
            method: 'put',
            url: '/user/{username}',
            urlForCopy: '`/user/${username}`',
            operationId: 'updateUser',
          },
          __index: 19,
        },
      ],
      matched: true,
    },
  ],
  namespace: {
    name: 'pet',
    description: 'Everything about your Pets',
    externalDocs: {
      description: 'Find out more',
      url: 'http://swagger.io',
    },
    apiItems: [
      {
        tags: ['pet'],
        summary: 'Add a new pet to the store',
        description: '',
        operationId: 'addPet',
        consumes: ['application/json', 'application/xml'],
        produces: ['application/json', 'application/xml'],
        parameters: [
          {
            in: 'body',
            name: 'body',
            description: 'Pet object that needs to be added to the store',
            required: true,
            schema: { $ref: '#/definitions/Pet' },
            display: 'body',
          },
        ],
        responses: { 405: { description: 'Invalid input', code: 405 } },
        security: [{ petstore_auth: ['write:pets', 'read:pets'] }],
        __id: '/pet|post',
        __produce: 'application/json',
        __info: {
          description: 'Add a new pet to the store',
          method: 'post',
          url: '/pet',
          urlForCopy: '`/pet`',
          operationId: 'addPet',
        },
        __index: 0,
      },
      {
        tags: ['pet'],
        summary: 'Update an existing pet',
        description: '',
        operationId: 'updatePet',
        consumes: ['application/json', 'application/xml'],
        produces: ['application/json', 'application/xml'],
        parameters: [
          {
            in: 'body',
            name: 'body',
            description: 'Pet object that needs to be added to the store',
            required: true,
            schema: { $ref: '#/definitions/Pet' },
            display: 'body',
          },
        ],
        responses: {
          400: { description: 'Invalid ID supplied', code: 400 },
          404: { description: 'Pet not found', code: 404 },
          405: { description: 'Validation exception', code: 405 },
        },
        security: [{ petstore_auth: ['write:pets', 'read:pets'] }],
        __id: '/pet|put',
        __produce: 'application/json',
        __info: {
          description: 'Update an existing pet',
          method: 'put',
          url: '/pet',
          urlForCopy: '`/pet`',
          operationId: 'updatePet',
        },
        __index: 1,
      },
      {
        tags: ['pet'],
        summary: 'Finds Pets by status',
        description:
          'Multiple status values can be provided with comma separated strings',
        operationId: 'findPetsByStatus',
        produces: ['application/json', 'application/xml'],
        parameters: [
          {
            name: 'status',
            in: 'query',
            description: 'Status values that need to be considered for filter',
            required: true,
            type: 'array',
            items: {
              type: 'string',
              enum: ['available', 'pending', 'sold'],
              default: 'available',
            },
            collectionFormat: 'multi',
            display: 'status',
          },
        ],
        responses: {
          200: {
            description: 'successful operation',
            schema: {
              type: 'array',
              items: { $ref: '#/definitions/Pet' },
            },
            code: 200,
          },
          400: { description: 'Invalid status value', code: 400 },
        },
        security: [{ petstore_auth: ['write:pets', 'read:pets'] }],
        __id: '/pet/findByStatus|get',
        __produce: 'application/json',
        __info: {
          description: 'Finds Pets by status',
          method: 'get',
          url: '/pet/findByStatus',
          urlForCopy: '`/pet/findByStatus`',
          operationId: 'findPetsByStatus',
        },
        __index: 2,
      },
      {
        tags: ['pet'],
        summary: 'Finds Pets by tags',
        description:
          'Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.',
        operationId: 'findPetsByTags',
        produces: ['application/json', 'application/xml'],
        parameters: [
          {
            name: 'tags',
            in: 'query',
            description: 'Tags to filter by',
            required: true,
            type: 'array',
            items: { type: 'string' },
            collectionFormat: 'multi',
            display: 'tags',
          },
        ],
        responses: {
          200: {
            description: 'successful operation',
            schema: {
              type: 'array',
              items: { $ref: '#/definitions/Pet' },
            },
            code: 200,
          },
          400: { description: 'Invalid tag value', code: 400 },
        },
        security: [{ petstore_auth: ['write:pets', 'read:pets'] }],
        deprecated: true,
        __id: '/pet/findByTags|get',
        __produce: 'application/json',
        __info: {
          description: 'Finds Pets by tags',
          method: 'get',
          url: '/pet/findByTags',
          deprecated: true,
          urlForCopy: '`/pet/findByTags`',
          operationId: 'findPetsByTags',
        },
        __index: 3,
      },
      {
        tags: ['pet'],
        summary: 'Deletes a pet',
        description: '',
        operationId: 'deletePet',
        produces: ['application/json', 'application/xml'],
        parameters: [
          {
            name: 'api_key',
            in: 'header',
            required: false,
            type: 'string',
            display: 'api_key?',
          },
          {
            name: 'petId',
            in: 'path',
            description: 'Pet id to delete',
            required: true,
            type: 'integer',
            format: 'int64',
            display: 'petId',
          },
        ],
        responses: {
          400: { description: 'Invalid ID supplied', code: 400 },
          404: { description: 'Pet not found', code: 404 },
        },
        security: [{ petstore_auth: ['write:pets', 'read:pets'] }],
        __id: '/pet/{petId}|delete',
        __produce: 'application/json',
        __info: {
          description: 'Deletes a pet',
          method: 'delete',
          url: '/pet/{petId}',
          urlForCopy: '`/pet/${petId}`',
          operationId: 'deletePet',
        },
        __index: 4,
      },
      {
        tags: ['pet'],
        summary: 'Find pet by ID',
        description: 'Returns a single pet',
        operationId: 'getPetById',
        produces: ['application/json', 'application/xml'],
        parameters: [
          {
            name: 'petId',
            in: 'path',
            description: 'ID of pet to return',
            required: true,
            type: 'integer',
            format: 'int64',
            display: 'petId',
          },
        ],
        responses: {
          200: {
            description: 'successful operation',
            schema: { $ref: '#/definitions/Pet' },
            code: 200,
          },
          400: { description: 'Invalid ID supplied', code: 400 },
          404: { description: 'Pet not found', code: 404 },
        },
        security: [{ api_key: [] }],
        __id: '/pet/{petId}|get',
        __produce: 'application/json',
        __info: {
          description: 'Find pet by ID',
          method: 'get',
          url: '/pet/{petId}',
          urlForCopy: '`/pet/${petId}`',
          operationId: 'getPetById',
        },
        __index: 5,
      },
      {
        tags: ['pet'],
        summary: 'Updates a pet in the store with form data',
        description: '',
        operationId: 'updatePetWithForm',
        consumes: ['application/x-www-form-urlencoded'],
        produces: ['application/json', 'application/xml'],
        parameters: [
          {
            name: 'petId',
            in: 'path',
            description: 'ID of pet that needs to be updated',
            required: true,
            type: 'integer',
            format: 'int64',
            display: 'petId',
          },
          {
            name: 'name',
            in: 'formData',
            description: 'Updated name of the pet',
            required: false,
            type: 'string',
            display: 'name?',
          },
          {
            name: 'status',
            in: 'formData',
            description: 'Updated status of the pet',
            required: false,
            type: 'string',
            display: 'status?',
          },
        ],
        responses: { 405: { description: 'Invalid input', code: 405 } },
        security: [{ petstore_auth: ['write:pets', 'read:pets'] }],
        __id: '/pet/{petId}|post',
        __produce: 'application/json',
        __info: {
          description: 'Updates a pet in the store with form data',
          method: 'post',
          url: '/pet/{petId}',
          urlForCopy: '`/pet/${petId}`',
          operationId: 'updatePetWithForm',
        },
        __index: 6,
      },
      {
        tags: ['pet'],
        summary: 'uploads an image',
        description: '',
        operationId: 'uploadFile',
        consumes: ['multipart/form-data'],
        produces: ['application/json'],
        parameters: [
          {
            name: 'petId',
            in: 'path',
            description: 'ID of pet to update',
            required: true,
            type: 'integer',
            format: 'int64',
            display: 'petId',
          },
          {
            name: 'additionalMetadata',
            in: 'formData',
            description: 'Additional data to pass to server',
            required: false,
            type: 'string',
            display: 'additionalMetadata?',
          },
          {
            name: 'file',
            in: 'formData',
            description: 'file to upload',
            required: false,
            type: 'file',
            display: 'file?',
          },
        ],
        responses: {
          200: {
            description: 'successful operation',
            schema: { $ref: '#/definitions/ApiResponse' },
            code: 200,
          },
        },
        security: [{ petstore_auth: ['write:pets', 'read:pets'] }],
        __id: '/pet/{petId}/uploadImage|post',
        __produce: 'application/json',
        __info: {
          description: 'uploads an image',
          method: 'post',
          url: '/pet/{petId}/uploadImage',
          urlForCopy: '`/pet/${petId}/uploadImage`',
          operationId: 'uploadFile',
        },
        __index: 7,
      },
    ],
    matched: true,
  },
  apiItems: [
    {
      tags: ['pet'],
      summary: 'Add a new pet to the store',
      description: '',
      operationId: 'addPet',
      consumes: ['application/json', 'application/xml'],
      produces: ['application/json', 'application/xml'],
      parameters: [
        {
          in: 'body',
          name: 'body',
          description: 'Pet object that needs to be added to the store',
          required: true,
          schema: { $ref: '#/definitions/Pet' },
          display: 'body',
        },
      ],
      responses: { 405: { description: 'Invalid input', code: 405 } },
      security: [{ petstore_auth: ['write:pets', 'read:pets'] }],
      __id: '/pet|post',
      __produce: 'application/json',
      __info: {
        description: 'Add a new pet to the store',
        method: 'post',
        url: '/pet',
        urlForCopy: '`/pet`',
        operationId: 'addPet',
      },
      __index: 0,
    },
    {
      tags: ['pet'],
      summary: 'Update an existing pet',
      description: '',
      operationId: 'updatePet',
      consumes: ['application/json', 'application/xml'],
      produces: ['application/json', 'application/xml'],
      parameters: [
        {
          in: 'body',
          name: 'body',
          description: 'Pet object that needs to be added to the store',
          required: true,
          schema: { $ref: '#/definitions/Pet' },
          display: 'body',
        },
      ],
      responses: {
        400: { description: 'Invalid ID supplied', code: 400 },
        404: { description: 'Pet not found', code: 404 },
        405: { description: 'Validation exception', code: 405 },
      },
      security: [{ petstore_auth: ['write:pets', 'read:pets'] }],
      __id: '/pet|put',
      __produce: 'application/json',
      __info: {
        description: 'Update an existing pet',
        method: 'put',
        url: '/pet',
        urlForCopy: '`/pet`',
        operationId: 'updatePet',
      },
      __index: 1,
    },
    {
      tags: ['pet'],
      summary: 'Finds Pets by status',
      description:
        'Multiple status values can be provided with comma separated strings',
      operationId: 'findPetsByStatus',
      produces: ['application/json', 'application/xml'],
      parameters: [
        {
          name: 'status',
          in: 'query',
          description: 'Status values that need to be considered for filter',
          required: true,
          type: 'array',
          items: {
            type: 'string',
            enum: ['available', 'pending', 'sold'],
            default: 'available',
          },
          collectionFormat: 'multi',
          display: 'status',
        },
      ],
      responses: {
        200: {
          description: 'successful operation',
          schema: {
            type: 'array',
            items: { $ref: '#/definitions/Pet' },
          },
          code: 200,
        },
        400: { description: 'Invalid status value', code: 400 },
      },
      security: [{ petstore_auth: ['write:pets', 'read:pets'] }],
      __id: '/pet/findByStatus|get',
      __produce: 'application/json',
      __info: {
        description: 'Finds Pets by status',
        method: 'get',
        url: '/pet/findByStatus',
        urlForCopy: '`/pet/findByStatus`',
        operationId: 'findPetsByStatus',
      },
      __index: 2,
    },
    {
      tags: ['pet'],
      summary: 'Finds Pets by tags',
      description:
        'Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.',
      operationId: 'findPetsByTags',
      produces: ['application/json', 'application/xml'],
      parameters: [
        {
          name: 'tags',
          in: 'query',
          description: 'Tags to filter by',
          required: true,
          type: 'array',
          items: { type: 'string' },
          collectionFormat: 'multi',
          display: 'tags',
        },
      ],
      responses: {
        200: {
          description: 'successful operation',
          schema: {
            type: 'array',
            items: { $ref: '#/definitions/Pet' },
          },
          code: 200,
        },
        400: { description: 'Invalid tag value', code: 400 },
      },
      security: [{ petstore_auth: ['write:pets', 'read:pets'] }],
      deprecated: true,
      __id: '/pet/findByTags|get',
      __produce: 'application/json',
      __info: {
        description: 'Finds Pets by tags',
        method: 'get',
        url: '/pet/findByTags',
        deprecated: true,
        urlForCopy: '`/pet/findByTags`',
        operationId: 'findPetsByTags',
      },
      __index: 3,
    },
    {
      tags: ['pet'],
      summary: 'Deletes a pet',
      description: '',
      operationId: 'deletePet',
      produces: ['application/json', 'application/xml'],
      parameters: [
        {
          name: 'api_key',
          in: 'header',
          required: false,
          type: 'string',
          display: 'api_key?',
        },
        {
          name: 'petId',
          in: 'path',
          description: 'Pet id to delete',
          required: true,
          type: 'integer',
          format: 'int64',
          display: 'petId',
        },
      ],
      responses: {
        400: { description: 'Invalid ID supplied', code: 400 },
        404: { description: 'Pet not found', code: 404 },
      },
      security: [{ petstore_auth: ['write:pets', 'read:pets'] }],
      __id: '/pet/{petId}|delete',
      __produce: 'application/json',
      __info: {
        description: 'Deletes a pet',
        method: 'delete',
        url: '/pet/{petId}',
        urlForCopy: '`/pet/${petId}`',
        operationId: 'deletePet',
      },
      __index: 4,
    },
    {
      tags: ['pet'],
      summary: 'Find pet by ID',
      description: 'Returns a single pet',
      operationId: 'getPetById',
      produces: ['application/json', 'application/xml'],
      parameters: [
        {
          name: 'petId',
          in: 'path',
          description: 'ID of pet to return',
          required: true,
          type: 'integer',
          format: 'int64',
          display: 'petId',
        },
      ],
      responses: {
        200: {
          description: 'successful operation',
          schema: { $ref: '#/definitions/Pet' },
          code: 200,
        },
        400: { description: 'Invalid ID supplied', code: 400 },
        404: { description: 'Pet not found', code: 404 },
      },
      security: [{ api_key: [] }],
      __id: '/pet/{petId}|get',
      __produce: 'application/json',
      __info: {
        description: 'Find pet by ID',
        method: 'get',
        url: '/pet/{petId}',
        urlForCopy: '`/pet/${petId}`',
        operationId: 'getPetById',
      },
      __index: 5,
    },
    {
      tags: ['pet'],
      summary: 'Updates a pet in the store with form data',
      description: '',
      operationId: 'updatePetWithForm',
      consumes: ['application/x-www-form-urlencoded'],
      produces: ['application/json', 'application/xml'],
      parameters: [
        {
          name: 'petId',
          in: 'path',
          description: 'ID of pet that needs to be updated',
          required: true,
          type: 'integer',
          format: 'int64',
          display: 'petId',
        },
        {
          name: 'name',
          in: 'formData',
          description: 'Updated name of the pet',
          required: false,
          type: 'string',
          display: 'name?',
        },
        {
          name: 'status',
          in: 'formData',
          description: 'Updated status of the pet',
          required: false,
          type: 'string',
          display: 'status?',
        },
      ],
      responses: { 405: { description: 'Invalid input', code: 405 } },
      security: [{ petstore_auth: ['write:pets', 'read:pets'] }],
      __id: '/pet/{petId}|post',
      __produce: 'application/json',
      __info: {
        description: 'Updates a pet in the store with form data',
        method: 'post',
        url: '/pet/{petId}',
        urlForCopy: '`/pet/${petId}`',
        operationId: 'updatePetWithForm',
      },
      __index: 6,
    },
    {
      tags: ['pet'],
      summary: 'uploads an image',
      description: '',
      operationId: 'uploadFile',
      consumes: ['multipart/form-data'],
      produces: ['application/json'],
      parameters: [
        {
          name: 'petId',
          in: 'path',
          description: 'ID of pet to update',
          required: true,
          type: 'integer',
          format: 'int64',
          display: 'petId',
        },
        {
          name: 'additionalMetadata',
          in: 'formData',
          description: 'Additional data to pass to server',
          required: false,
          type: 'string',
          display: 'additionalMetadata?',
        },
        {
          name: 'file',
          in: 'formData',
          description: 'file to upload',
          required: false,
          type: 'file',
          display: 'file?',
        },
      ],
      responses: {
        200: {
          description: 'successful operation',
          schema: { $ref: '#/definitions/ApiResponse' },
          code: 200,
        },
      },
      security: [{ petstore_auth: ['write:pets', 'read:pets'] }],
      __id: '/pet/{petId}/uploadImage|post',
      __produce: 'application/json',
      __info: {
        description: 'uploads an image',
        method: 'post',
        url: '/pet/{petId}/uploadImage',
        urlForCopy: '`/pet/${petId}/uploadImage`',
        operationId: 'uploadFile',
      },
      __index: 7,
    },
  ],
} as Any) as StoreData;
